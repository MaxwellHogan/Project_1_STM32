
Project_1_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a94  08005a94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a94  08005a94  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a94  08005a94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000424  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000430  20000430  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145be  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003094  00000000  00000000  000345fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00037690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  00038918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f174  00000000  00000000  00039a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f76  00000000  00000000  00058b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5d5c  00000000  00000000  00070b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012685e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cf4  00000000  00000000  001268b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a4c 	.word	0x08005a4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a4c 	.word	0x08005a4c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
     PA5   ------> SPI1_SCK
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
     PB6   ------> I2C1_SCL
     PB7   ------> I2C1_SDA
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]
*/
void MX_GPIO_Init(void)
{
 80001de:	4b3e      	ldr	r3, [pc, #248]	; (80002d8 <MX_GPIO_Init+0x110>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a3d      	ldr	r2, [pc, #244]	; (80002d8 <MX_GPIO_Init+0x110>)
 80001e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b3b      	ldr	r3, [pc, #236]	; (80002d8 <MX_GPIO_Init+0x110>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]

 80001f6:	4b38      	ldr	r3, [pc, #224]	; (80002d8 <MX_GPIO_Init+0x110>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a37      	ldr	r2, [pc, #220]	; (80002d8 <MX_GPIO_Init+0x110>)
 80001fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b35      	ldr	r3, [pc, #212]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020e:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <MX_GPIO_Init+0x110>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]

 8000226:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <MX_GPIO_Init+0x110>)
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]
  /* GPIO Ports Clock Enable */
 800023e:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <MX_GPIO_Init+0x110>)
 8000244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000248:	6153      	str	r3, [r2, #20]
 800024a:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <MX_GPIO_Init+0x110>)
 800024c:	695b      	ldr	r3, [r3, #20]
 800024e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000252:	603b      	str	r3, [r7, #0]
 8000254:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000256:	2200      	movs	r2, #0
 8000258:	f64f 7108 	movw	r1, #65288	; 0xff08
 800025c:	481f      	ldr	r0, [pc, #124]	; (80002dc <MX_GPIO_Init+0x114>)
 800025e:	f001 f971 	bl	8001544 <HAL_GPIO_WritePin>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000262:	2335      	movs	r3, #53	; 0x35
 8000264:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
 8000266:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800026a:	61bb      	str	r3, [r7, #24]
                          |LD6_Pin, GPIO_PIN_RESET);
 800026c:	2300      	movs	r3, #0
 800026e:	61fb      	str	r3, [r7, #28]

 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	4619      	mov	r1, r3
 8000276:	4819      	ldr	r0, [pc, #100]	; (80002dc <MX_GPIO_Init+0x114>)
 8000278:	f000 ff0e 	bl	8001098 <HAL_GPIO_Init>
  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800027c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000280:	617b      	str	r3, [r7, #20]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
 8000282:	2301      	movs	r3, #1
 8000284:	61bb      	str	r3, [r7, #24]
                           PEPin */
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800028a:	2300      	movs	r3, #0
 800028c:	623b      	str	r3, [r7, #32]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	4619      	mov	r1, r3
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <MX_GPIO_Init+0x114>)
 8000296:	f000 feff 	bl	8001098 <HAL_GPIO_Init>
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2301      	movs	r3, #1
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]

 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4619      	mov	r1, r3
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 fef2 	bl	8001098 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b4:	2302      	movs	r3, #2
 80002b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]

 80002c2:	f107 0314 	add.w	r3, r7, #20
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_GPIO_Init+0x114>)
 80002ca:	f000 fee5 	bl	8001098 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80002ce:	bf00      	nop
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	48001000 	.word	0x48001000

080002e0 <MX_I2C1_Init>:
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_I2C1_Init+0x74>)
 80002e6:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <MX_I2C1_Init+0x78>)
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <MX_I2C1_Init+0x74>)
 80002ec:	4a1b      	ldr	r2, [pc, #108]	; (800035c <MX_I2C1_Init+0x7c>)
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_I2C1_Init+0x74>)
 80002f2:	2240      	movs	r2, #64	; 0x40
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_I2C1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	619a      	str	r2, [r3, #24]
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <MX_I2C1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_I2C1_Init+0x74>)
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <MX_I2C1_Init+0x74>)
 800031c:	f001 f92a 	bl	8001574 <HAL_I2C_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_I2C1_Init+0x4a>
 8000326:	f000 fa51 	bl	80007cc <Error_Handler>
 800032a:	2100      	movs	r1, #0
 800032c:	4809      	ldr	r0, [pc, #36]	; (8000354 <MX_I2C1_Init+0x74>)
 800032e:	f002 fbbb 	bl	8002aa8 <HAL_I2CEx_ConfigAnalogFilter>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_I2C1_Init+0x5c>
 8000338:	f000 fa48 	bl	80007cc <Error_Handler>
 800033c:	2100      	movs	r1, #0
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_I2C1_Init+0x74>)
 8000340:	f002 fbfd 	bl	8002b3e <HAL_I2CEx_ConfigDigitalFilter>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_I2C1_Init+0x6e>
 800034a:	f000 fa3f 	bl	80007cc <Error_Handler>
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000028 	.word	0x20000028
 8000358:	40005400 	.word	0x40005400
 800035c:	2000090e 	.word	0x2000090e

08000360 <HAL_I2C_MspInit>:
 8000360:	b580      	push	{r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a23      	ldr	r2, [pc, #140]	; (800040c <HAL_I2C_MspInit+0xac>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d13f      	bne.n	8000402 <HAL_I2C_MspInit+0xa2>
 8000382:	4b23      	ldr	r3, [pc, #140]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a22      	ldr	r2, [pc, #136]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 8000388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b20      	ldr	r3, [pc, #128]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000396:	613b      	str	r3, [r7, #16]
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	2340      	movs	r3, #64	; 0x40
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	2312      	movs	r3, #18
 80003a0:	61bb      	str	r3, [r7, #24]
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
 80003a6:	2303      	movs	r3, #3
 80003a8:	623b      	str	r3, [r7, #32]
 80003aa:	2304      	movs	r3, #4
 80003ac:	627b      	str	r3, [r7, #36]	; 0x24
 80003ae:	f107 0314 	add.w	r3, r7, #20
 80003b2:	4619      	mov	r1, r3
 80003b4:	4817      	ldr	r0, [pc, #92]	; (8000414 <HAL_I2C_MspInit+0xb4>)
 80003b6:	f000 fe6f 	bl	8001098 <HAL_GPIO_Init>
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	2312      	movs	r3, #18
 80003c0:	61bb      	str	r3, [r7, #24]
 80003c2:	2301      	movs	r3, #1
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	2303      	movs	r3, #3
 80003c8:	623b      	str	r3, [r7, #32]
 80003ca:	2304      	movs	r3, #4
 80003cc:	627b      	str	r3, [r7, #36]	; 0x24
 80003ce:	f107 0314 	add.w	r3, r7, #20
 80003d2:	4619      	mov	r1, r3
 80003d4:	480f      	ldr	r0, [pc, #60]	; (8000414 <HAL_I2C_MspInit+0xb4>)
 80003d6:	f000 fe5f 	bl	8001098 <HAL_GPIO_Init>
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 80003e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003e4:	61d3      	str	r3, [r2, #28]
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_I2C_MspInit+0xb0>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	201f      	movs	r0, #31
 80003f8:	f000 fdcd 	bl	8000f96 <HAL_NVIC_SetPriority>
 80003fc:	201f      	movs	r0, #31
 80003fe:	f000 fde6 	bl	8000fce <HAL_NVIC_EnableIRQ>
 8000402:	bf00      	nop
 8000404:	3728      	adds	r7, #40	; 0x28
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40005400 	.word	0x40005400
 8000410:	40021000 	.word	0x40021000
 8000414:	48000400 	.word	0x48000400

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041c:	f000 fc56 	bl	8000ccc <HAL_Init>

  /* USER CODE BEGIN Init */

  //The following code initialises the receive and transmit buffers being used.
  aRxBuffer[0]=0x00;
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <main+0x9c>)
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000426:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <main+0x9c>)
 8000428:	2200      	movs	r2, #0
 800042a:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <main+0x9c>)
 800042e:	2200      	movs	r2, #0
 8000430:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 8000432:	4b20      	ldr	r3, [pc, #128]	; (80004b4 <main+0x9c>)
 8000434:	2200      	movs	r2, #0
 8000436:	70da      	strb	r2, [r3, #3]

  aTxBuffer[0]=0x00;
 8000438:	4b1f      	ldr	r3, [pc, #124]	; (80004b8 <main+0xa0>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]=0x00;
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <main+0xa0>)
 8000440:	2200      	movs	r2, #0
 8000442:	705a      	strb	r2, [r3, #1]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f000 f844 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000448:	f7ff febe 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800044c:	f7ff ff48 	bl	80002e0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000450:	f000 f9c2 	bl	80007d8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000454:	f000 fbaa 	bl	8000bac <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000458:	f000 fb16 	bl	8000a88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Initialise the gyro driver
  GYRO_Init();
 800045c:	f005 fa2a 	bl	80058b4 <GYRO_Init>
  ui8gyroID = L3GD20_ReadID();
 8000460:	f005 fa6b 	bl	800593a <L3GD20_ReadID>
 8000464:	4603      	mov	r3, r0
 8000466:	461a      	mov	r2, r3
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <main+0xa4>)
 800046a:	701a      	strb	r2, [r3, #0]
  GYRO_IO_Read(testBuf, L3GD20_CTRL_REG3_ADDR, sizeof(testBuf));
 800046c:	2201      	movs	r2, #1
 800046e:	2122      	movs	r1, #34	; 0x22
 8000470:	4813      	ldr	r0, [pc, #76]	; (80004c0 <main+0xa8>)
 8000472:	f005 f9e5 	bl	8005840 <GYRO_IO_Read>

  /* Enable the Listen mode with Interrupts for the I2C:
   * The Listen Mode will wait for an I2C Event to occur
   * and will be treated in the Interrupt Service Routine of the I2C. */
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000476:	4813      	ldr	r0, [pc, #76]	; (80004c4 <main+0xac>)
 8000478:	f001 fa54 	bl	8001924 <HAL_I2C_EnableListen_IT>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <main+0x6e>
  {
	  /* Transfer error in reception process */
	  Error_Handler();
 8000482:	f000 f9a3 	bl	80007cc <Error_Handler>
  while (1)
  {

	// check to see if new

	if(Xfer_Complete)
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <main+0xb0>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d00d      	beq.n	80004aa <main+0x92>
	{
		HAL_Delay(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fc82 	bl	8000d98 <HAL_Delay>

		/* Put I2C peripheral in listen mode process */
		if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000494:	480b      	ldr	r0, [pc, #44]	; (80004c4 <main+0xac>)
 8000496:	f001 fa45 	bl	8001924 <HAL_I2C_EnableListen_IT>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <main+0x8c>
		{
			/* Transfer error in reception process */
			Error_Handler();
 80004a0:	f000 f994 	bl	80007cc <Error_Handler>
		}
		Xfer_Complete = 0;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <main+0xb0>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
	}

    // get new data from gyro
	L3GD20_ReadXYZAngRate_Raw(spi_Buffer);
 80004aa:	4808      	ldr	r0, [pc, #32]	; (80004cc <main+0xb4>)
 80004ac:	f005 fa95 	bl	80059da <L3GD20_ReadXYZAngRate_Raw>
  {
 80004b0:	e7e9      	b.n	8000486 <main+0x6e>
 80004b2:	bf00      	nop
 80004b4:	20000080 	.word	0x20000080
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	2000008a 	.word	0x2000008a
 80004c0:	2000008c 	.word	0x2000008c
 80004c4:	20000028 	.word	0x20000028
 80004c8:	20000078 	.word	0x20000078
 80004cc:	20000084 	.word	0x20000084

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09e      	sub	sp, #120	; 0x78
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f005 faac 	bl	8005a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f4:	463b      	mov	r3, r7
 80004f6:	223c      	movs	r2, #60	; 0x3c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f005 fa9e 	bl	8005a3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000500:	2303      	movs	r3, #3
 8000502:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000504:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000508:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	2301      	movs	r3, #1
 8000510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000520:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000524:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fc32 	bl	8002d94 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000536:	f000 f949 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fc5a 	bl	8003e10 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000562:	f000 f933 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <SystemClock_Config+0xc4>)
 8000568:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800056a:	2300      	movs	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000578:	463b      	mov	r3, r7
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fe2e 	bl	80041dc <HAL_RCCEx_PeriphCLKConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000586:	f000 f921 	bl	80007cc <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3778      	adds	r7, #120	; 0x78
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	00021020 	.word	0x00021020

08000598 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// callback function to reset the I2C if time-out occurred
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a06      	ldr	r2, [pc, #24]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d105      	bne.n	80005b4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		// reset timer
		HAL_TIM_Base_Stop_IT(&htim1);
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005aa:	f004 fcd3 	bl	8004f54 <HAL_TIM_Base_Stop_IT>
		Xfer_Complete = 1;
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	601a      	str	r2, [r3, #0]
	}
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000f4 	.word	0x200000f4
 80005c0:	20000078 	.word	0x20000078

080005c4 <set_led>:
  * @note   This is a simple helper function to turn on a single LED, it requires a number to select an LED,
  * 		starting at 0 with the LED in the 12oclock position and increasing clockwise (up to 7 for the 8th LED)
  * @retval None
  */

void set_led(uint8_t counter){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	// set all user LEDs low
	HAL_GPIO_WritePin(GPIOE, LD4_Pin|LD3_Pin|LD5_Pin|LD7_Pin
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80005d4:	482b      	ldr	r0, [pc, #172]	; (8000684 <set_led+0xc0>)
 80005d6:	f000 ffb5 	bl	8001544 <HAL_GPIO_WritePin>
							|LD9_Pin|LD10_Pin|LD8_Pin|LD6_Pin,
							GPIO_PIN_RESET);
	  switch (counter) {
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b07      	cmp	r3, #7
 80005de:	d84b      	bhi.n	8000678 <set_led+0xb4>
 80005e0:	a201      	add	r2, pc, #4	; (adr r2, 80005e8 <set_led+0x24>)
 80005e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e6:	bf00      	nop
 80005e8:	08000609 	.word	0x08000609
 80005ec:	08000617 	.word	0x08000617
 80005f0:	08000625 	.word	0x08000625
 80005f4:	08000633 	.word	0x08000633
 80005f8:	08000641 	.word	0x08000641
 80005fc:	0800064f 	.word	0x0800064f
 8000600:	0800065d 	.word	0x0800065d
 8000604:	0800066b 	.word	0x0800066b
	    case 0:
	    	HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060e:	481d      	ldr	r0, [pc, #116]	; (8000684 <set_led+0xc0>)
 8000610:	f000 ff98 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 8000614:	e031      	b.n	800067a <set_led+0xb6>
	    case 1:
	    	HAL_GPIO_WritePin(GPIOE, LD5_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800061c:	4819      	ldr	r0, [pc, #100]	; (8000684 <set_led+0xc0>)
 800061e:	f000 ff91 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 8000622:	e02a      	b.n	800067a <set_led+0xb6>
	    case 2:
	    	HAL_GPIO_WritePin(GPIOE, LD7_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800062a:	4816      	ldr	r0, [pc, #88]	; (8000684 <set_led+0xc0>)
 800062c:	f000 ff8a 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 8000630:	e023      	b.n	800067a <set_led+0xb6>
	    case 3:
	    	HAL_GPIO_WritePin(GPIOE, LD9_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000638:	4812      	ldr	r0, [pc, #72]	; (8000684 <set_led+0xc0>)
 800063a:	f000 ff83 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 800063e:	e01c      	b.n	800067a <set_led+0xb6>
	    case 4:
	    	HAL_GPIO_WritePin(GPIOE, LD10_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <set_led+0xc0>)
 8000648:	f000 ff7c 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 800064c:	e015      	b.n	800067a <set_led+0xb6>
	    case 5:
	    	HAL_GPIO_WritePin(GPIOE, LD8_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <set_led+0xc0>)
 8000656:	f000 ff75 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 800065a:	e00e      	b.n	800067a <set_led+0xb6>
	    case 6:
	    	HAL_GPIO_WritePin(GPIOE, LD6_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <set_led+0xc0>)
 8000664:	f000 ff6e 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 8000668:	e007      	b.n	800067a <set_led+0xb6>
	    case 7:
	    	HAL_GPIO_WritePin(GPIOE, LD4_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <set_led+0xc0>)
 8000672:	f000 ff67 	bl	8001544 <HAL_GPIO_WritePin>
	    	break;
 8000676:	e000      	b.n	800067a <set_led+0xb6>
	    default:
//	    	HAL_GPIO_WritePin(GPIOE, LD3_Pin, GPIO_PIN_SET); // set the first led
			break;
 8000678:	bf00      	nop
	  }

}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	48001000 	.word	0x48001000

08000688 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim1); // stop time-out counter
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8000692:	f004 fc5f 	bl	8004f54 <HAL_TIM_Base_Stop_IT>

	Xfer_Complete = 1;
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 8000698:	2201      	movs	r2, #1
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000f4 	.word	0x200000f4
 80006a8:	20000078 	.word	0x20000078

080006ac <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(&htim1); // stop timeout counter
 80006b4:	4816      	ldr	r0, [pc, #88]	; (8000710 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80006b6:	f004 fc4d 	bl	8004f54 <HAL_TIM_Base_Stop_IT>
//  aRxBuffer[0]; // dummy byte - no idea, something wrong in smbus2 lib on python side
//  aRxBuffer[1]; // command - set_LED = 0x01
//  aRxBuffer[2]; // value of LED

	switch (aRxBuffer[1]){
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80006bc:	785b      	ldrb	r3, [r3, #1]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	d015      	beq.n	80006ee <HAL_I2C_SlaveRxCpltCallback+0x42>
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	dc1c      	bgt.n	8000700 <HAL_I2C_SlaveRxCpltCallback+0x54>
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d002      	beq.n	80006d0 <HAL_I2C_SlaveRxCpltCallback+0x24>
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d006      	beq.n	80006dc <HAL_I2C_SlaveRxCpltCallback+0x30>
		  aTxBuffer[0]=spi_Buffer[2];
		  aTxBuffer[1]=spi_Buffer[3];
		  break;
	default:
		// do nothing
		break;
 80006ce:	e017      	b.n	8000700 <HAL_I2C_SlaveRxCpltCallback+0x54>
		set_led(aRxBuffer[2]);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff75 	bl	80005c4 <set_led>
		break;
 80006da:	e012      	b.n	8000702 <HAL_I2C_SlaveRxCpltCallback+0x56>
		  aTxBuffer[0]=spi_Buffer[0];
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80006e2:	701a      	strb	r2, [r3, #0]
		  aTxBuffer[1]=spi_Buffer[1];
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80006e6:	785a      	ldrb	r2, [r3, #1]
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80006ea:	705a      	strb	r2, [r3, #1]
		  break;
 80006ec:	e009      	b.n	8000702 <HAL_I2C_SlaveRxCpltCallback+0x56>
		  aTxBuffer[0]=spi_Buffer[2];
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80006f0:	789a      	ldrb	r2, [r3, #2]
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80006f4:	701a      	strb	r2, [r3, #0]
		  aTxBuffer[1]=spi_Buffer[3];
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80006f8:	78da      	ldrb	r2, [r3, #3]
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 80006fc:	705a      	strb	r2, [r3, #1]
		  break;
 80006fe:	e000      	b.n	8000702 <HAL_I2C_SlaveRxCpltCallback+0x56>
		break;
 8000700:	bf00      	nop
	}
	Xfer_Complete = 1;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000f4 	.word	0x200000f4
 8000714:	20000080 	.word	0x20000080
 8000718:	20000084 	.word	0x20000084
 800071c:	2000007c 	.word	0x2000007c
 8000720:	20000078 	.word	0x20000078

08000724 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
 8000730:	4613      	mov	r3, r2
 8000732:	803b      	strh	r3, [r7, #0]
	Xfer_Direction = TransferDirection;
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <HAL_I2C_AddrCallback+0x60>)
 8000738:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim1); // start timeout timer
 800073a:	4813      	ldr	r0, [pc, #76]	; (8000788 <HAL_I2C_AddrCallback+0x64>)
 800073c:	f004 fba0 	bl	8004e80 <HAL_TIM_Base_Start_IT>
	if (Xfer_Direction != 0)
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_I2C_AddrCallback+0x60>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00c      	beq.n	8000762 <HAL_I2C_AddrCallback+0x3e>
	{
		/* Start the transmission process */
		/* While the I2C in reception process, user can transmit data through "aTxBuffer" buffer */
		if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800074c:	2204      	movs	r2, #4
 800074e:	490f      	ldr	r1, [pc, #60]	; (800078c <HAL_I2C_AddrCallback+0x68>)
 8000750:	480f      	ldr	r0, [pc, #60]	; (8000790 <HAL_I2C_AddrCallback+0x6c>)
 8000752:	f000 ff9f 	bl	8001694 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00e      	beq.n	800077a <HAL_I2C_AddrCallback+0x56>
		{
			/* Transfer error in transmission process */
			Error_Handler();
 800075c:	f000 f836 	bl	80007cc <Error_Handler>
			/* Transfer error in reception process */
			Error_Handler();
		}
	}

}
 8000760:	e00b      	b.n	800077a <HAL_I2C_AddrCallback+0x56>
		if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000766:	2204      	movs	r2, #4
 8000768:	490a      	ldr	r1, [pc, #40]	; (8000794 <HAL_I2C_AddrCallback+0x70>)
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <HAL_I2C_AddrCallback+0x6c>)
 800076c:	f001 f836 	bl	80017dc <HAL_I2C_Slave_Seq_Receive_IT>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_I2C_AddrCallback+0x56>
			Error_Handler();
 8000776:	f000 f829 	bl	80007cc <Error_Handler>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000074 	.word	0x20000074
 8000788:	200000f4 	.word	0x200000f4
 800078c:	2000007c 	.word	0x2000007c
 8000790:	20000028 	.word	0x20000028
 8000794:	20000080 	.word	0x20000080

08000798 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f001 f921 	bl	80019fc <HAL_I2C_GetError>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b04      	cmp	r3, #4
 80007be:	d001      	beq.n	80007c4 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80007c0:	f000 f804 	bl	80007cc <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <MX_SPI1_Init>:
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_SPI1_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_SPI1_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_SPI1_Init+0x74>)
 80007e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_SPI1_Init+0x74>)
 80007f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_SPI1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_SPI1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_SPI1_Init+0x74>)
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	619a      	str	r2, [r3, #24]
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_SPI1_Init+0x74>)
 800080e:	2218      	movs	r2, #24
 8000810:	61da      	str	r2, [r3, #28]
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_SPI1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	625a      	str	r2, [r3, #36]	; 0x24
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_SPI1_Init+0x74>)
 8000826:	2207      	movs	r2, #7
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_SPI1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	631a      	str	r2, [r3, #48]	; 0x30
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_SPI1_Init+0x74>)
 8000832:	2208      	movs	r2, #8
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_SPI1_Init+0x74>)
 8000838:	f003 fe80 	bl	800453c <HAL_SPI_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_SPI1_Init+0x6e>
 8000842:	f7ff ffc3 	bl	80007cc <Error_Handler>
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000090 	.word	0x20000090
 8000850:	40013000 	.word	0x40013000

08000854 <HAL_SPI_MspInit>:
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_SPI_MspInit+0x7c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d128      	bne.n	80008c8 <HAL_SPI_MspInit+0x74>
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 800087c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <HAL_SPI_MspInit+0x80>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	23e0      	movs	r3, #224	; 0xe0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	2305      	movs	r3, #5
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f000 fbe8 	bl	8001098 <HAL_GPIO_Init>
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013000 	.word	0x40013000
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_SPI_MspDeInit>:
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_SPI_MspDeInit+0x30>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d10a      	bne.n	8000900 <HAL_SPI_MspDeInit+0x28>
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_SPI_MspDeInit+0x34>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_SPI_MspDeInit+0x34>)
 80008f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	21e0      	movs	r1, #224	; 0xe0
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fd46 	bl	800138c <HAL_GPIO_DeInit>
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40013000 	.word	0x40013000
 800090c:	40021000 	.word	0x40021000

08000910 <SPI1_Error>:
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <SPI1_Error+0x14>)
 8000916:	f003 febc 	bl	8004692 <HAL_SPI_DeInit>
 800091a:	f7ff ff5d 	bl	80007d8 <MX_SPI1_Init>
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000090 	.word	0x20000090

08000928 <SPI1_WriteRead>:
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af02      	add	r7, sp, #8
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
 8000936:	f107 020f 	add.w	r2, r7, #15
 800093a:	1df9      	adds	r1, r7, #7
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2301      	movs	r3, #1
 8000944:	4806      	ldr	r0, [pc, #24]	; (8000960 <SPI1_WriteRead+0x38>)
 8000946:	f003 fecc 	bl	80046e2 <HAL_SPI_TransmitReceive>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SPI1_WriteRead+0x2c>
 8000950:	f7ff ffde 	bl	8000910 <SPI1_Error>
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000090 	.word	0x20000090

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	61d3      	str	r3, [r2, #28]
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 faf0 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000

080009ac <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
  {
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:
/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:
/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
  /* USER CODE BEGIN SVCall_IRQn 0 */
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}

 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}

 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
  /* USER CODE BEGIN PendSV_IRQn 0 */
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}

 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
 80009f8:	f000 f9ae 	bl	8000d58 <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 1 */
}

 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <TIM1_BRK_TIM15_IRQHandler>:
/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000a06:	f004 fad4 	bl	8004fb2 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}

 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000f4 	.word	0x200000f4

08000a14 <TIM1_UP_TIM16_IRQHandler>:
/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a1a:	f004 faca 	bl	8004fb2 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}

 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000f4 	.word	0x200000f4

08000a28 <TIM1_TRG_COM_TIM17_IRQHandler>:
/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000a2e:	f004 fac0 	bl	8004fb2 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}

 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000f4 	.word	0x200000f4

08000a3c <TIM1_CC_IRQHandler>:
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM1_CC_IRQHandler+0x10>)
 8000a42:	f004 fab6 	bl	8004fb2 <HAL_TIM_IRQHandler>

  /* USER CODE END TIM1_CC_IRQn 1 */
}

 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000f4 	.word	0x200000f4

08000a50 <I2C1_EV_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <I2C1_EV_IRQHandler+0x10>)
 8000a56:	f000 ff85 	bl	8001964 <HAL_I2C_EV_IRQHandler>
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000028 	.word	0x20000028

08000a64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000aa8:	4a20      	ldr	r2, [pc, #128]	; (8000b2c <MX_TIM1_Init+0xa4>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000aae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ad2:	4815      	ldr	r0, [pc, #84]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000ad4:	f004 f97c 	bl	8004dd0 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ade:	f7ff fe75 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000af0:	f004 fb7e 	bl	80051f0 <HAL_TIM_ConfigClockSource>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000afa:	f7ff fe67 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_TIM1_Init+0xa0>)
 8000b10:	f004 fd8a 	bl	8005628 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b1a:	f7ff fe57 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000f4 	.word	0x200000f4
 8000b2c:	40012c00 	.word	0x40012c00

08000b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_TIM_Base_MspInit+0x74>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12b      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_TIM_Base_MspInit+0x78>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <HAL_TIM_Base_MspInit+0x78>)
 8000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b4c:	6193      	str	r3, [r2, #24]
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_TIM_Base_MspInit+0x78>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2018      	movs	r0, #24
 8000b60:	f000 fa19 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b64:	2018      	movs	r0, #24
 8000b66:	f000 fa32 	bl	8000fce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f000 fa11 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b74:	2019      	movs	r0, #25
 8000b76:	f000 fa2a 	bl	8000fce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	201a      	movs	r0, #26
 8000b80:	f000 fa09 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000b84:	201a      	movs	r0, #26
 8000b86:	f000 fa22 	bl	8000fce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	201b      	movs	r0, #27
 8000b90:	f000 fa01 	bl	8000f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b94:	201b      	movs	r0, #27
 8000b96:	f000 fa1a 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	40021000 	.word	0x40021000

08000bac <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <MX_USB_PCD_Init+0x40>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_USB_PCD_Init+0x3c>)
 8000bd6:	f001 fffe 	bl	8002bd6 <HAL_PCD_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000be0:	f7ff fdf4 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000140 	.word	0x20000140
 8000bec:	40005c00 	.word	0x40005c00

08000bf0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <HAL_PCD_MspInit+0x80>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d129      	bne.n	8000c66 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	6153      	str	r3, [r2, #20]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000c2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000c3c:	230e      	movs	r3, #14
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4a:	f000 fa25 	bl	8001098 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c50:	69db      	ldr	r3, [r3, #28]
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c58:	61d3      	str	r3, [r2, #28]
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_PCD_MspInit+0x84>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005c00 	.word	0x40005c00
 8000c74:	40021000 	.word	0x40021000

08000c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca2:	f7ff fedf 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f004 fea5 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000caa:	f7ff fbb5 	bl	8000418 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cbc:	08005a9c 	.word	0x08005a9c
  ldr r2, =_sbss
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc4:	20000430 	.word	0x20000430

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x28>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x28>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f94f 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fe3c 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f967 	bl	8000fea <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f92f 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000042c 	.word	0x2000042c

08000d80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000042c 	.word	0x2000042c

08000d98 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <__NVIC_EnableIRQ+0x38>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff29 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff3e 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff31 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffa2 	bl	8000f3c <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001014:	2b02      	cmp	r3, #2
 8001016:	d005      	beq.n	8001024 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2204      	movs	r2, #4
 800101c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e027      	b.n	8001074 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 020e 	bic.w	r2, r2, #14
 8001032:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	4798      	blx	r3
    } 
  }
  return status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e154      	b.n	8001352 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8146 	beq.w	800134c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x40>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d017      	beq.n	8001176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0203 	and.w	r2, r3, #3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80a0 	beq.w	800134c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_GPIO_Init+0x2d8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x2d8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_GPIO_Init+0x2d8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	4a53      	ldr	r2, [pc, #332]	; (8001374 <HAL_GPIO_Init+0x2dc>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124e:	d019      	beq.n	8001284 <HAL_GPIO_Init+0x1ec>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a49      	ldr	r2, [pc, #292]	; (8001378 <HAL_GPIO_Init+0x2e0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1e8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a48      	ldr	r2, [pc, #288]	; (800137c <HAL_GPIO_Init+0x2e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a47      	ldr	r2, [pc, #284]	; (8001380 <HAL_GPIO_Init+0x2e8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a46      	ldr	r2, [pc, #280]	; (8001384 <HAL_GPIO_Init+0x2ec>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1dc>
 8001270:	2304      	movs	r3, #4
 8001272:	e008      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001274:	2305      	movs	r3, #5
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001284:	2300      	movs	r3, #0
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001296:	4937      	ldr	r1, [pc, #220]	; (8001374 <HAL_GPIO_Init+0x2dc>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012c8:	4a2f      	ldr	r2, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f2:	4a25      	ldr	r2, [pc, #148]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001346:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_GPIO_Init+0x2f0>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f aea3 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800139a:	e0b8      	b.n	800150e <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80ab 	beq.w	8001508 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80013b2:	4a5e      	ldr	r2, [pc, #376]	; (800152c <HAL_GPIO_DeInit+0x1a0>)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3302      	adds	r3, #2
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	220f      	movs	r2, #15
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013da:	d019      	beq.n	8001410 <HAL_GPIO_DeInit+0x84>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_GPIO_DeInit+0x1a4>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d013      	beq.n	800140c <HAL_GPIO_DeInit+0x80>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a53      	ldr	r2, [pc, #332]	; (8001534 <HAL_GPIO_DeInit+0x1a8>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_DeInit+0x7c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_DeInit+0x1ac>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_DeInit+0x78>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a51      	ldr	r2, [pc, #324]	; (800153c <HAL_GPIO_DeInit+0x1b0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_DeInit+0x74>
 80013fc:	2304      	movs	r3, #4
 80013fe:	e008      	b.n	8001412 <HAL_GPIO_DeInit+0x86>
 8001400:	2305      	movs	r3, #5
 8001402:	e006      	b.n	8001412 <HAL_GPIO_DeInit+0x86>
 8001404:	2303      	movs	r3, #3
 8001406:	e004      	b.n	8001412 <HAL_GPIO_DeInit+0x86>
 8001408:	2302      	movs	r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_DeInit+0x86>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <HAL_GPIO_DeInit+0x86>
 8001410:	2300      	movs	r3, #0
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	f002 0203 	and.w	r2, r2, #3
 8001418:	0092      	lsls	r2, r2, #2
 800141a:	4093      	lsls	r3, r2
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	429a      	cmp	r2, r3
 8001420:	d132      	bne.n	8001488 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	4945      	ldr	r1, [pc, #276]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 800142c:	4013      	ands	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	4941      	ldr	r1, [pc, #260]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 800143a:	4013      	ands	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800143e:	4b40      	ldr	r3, [pc, #256]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	43db      	mvns	r3, r3
 8001446:	493e      	ldr	r1, [pc, #248]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 8001448:	4013      	ands	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800144c:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	493a      	ldr	r1, [pc, #232]	; (8001540 <HAL_GPIO_DeInit+0x1b4>)
 8001456:	4013      	ands	r3, r2
 8001458:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800146a:	4a30      	ldr	r2, [pc, #192]	; (800152c <HAL_GPIO_DeInit+0x1a0>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	482c      	ldr	r0, [pc, #176]	; (800152c <HAL_GPIO_DeInit+0x1a0>)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	400a      	ands	r2, r1
 8001482:	3302      	adds	r3, #2
 8001484:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2103      	movs	r1, #3
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	08d2      	lsrs	r2, r2, #3
 80014be:	4019      	ands	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2103      	movs	r1, #3
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	2101      	movs	r1, #1
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2103      	movs	r1, #3
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	f47f af40 	bne.w	800139c <HAL_GPIO_DeInit+0x10>
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000
 8001530:	48000400 	.word	0x48000400
 8001534:	48000800 	.word	0x48000800
 8001538:	48000c00 	.word	0x48000c00
 800153c:	48001000 	.word	0x48001000
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001560:	e002      	b.n	8001568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e081      	b.n	800168a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d106      	bne.n	80015a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7fe fee0 	bl	8000360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2224      	movs	r2, #36	; 0x24
 80015a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e006      	b.n	80015fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d104      	bne.n	800160e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800161c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001620:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001630:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69d9      	ldr	r1, [r3, #28]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1a      	ldr	r2, [r3, #32]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	4613      	mov	r3, r2
 80016a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016b0:	2b28      	cmp	r3, #40	; 0x28
 80016b2:	f040 808a 	bne.w	80017ca <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e07e      	b.n	80017cc <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80016ce:	f248 0101 	movw	r1, #32769	; 0x8001
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f001 f98a 	bl	80029ec <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e072      	b.n	80017cc <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b2a      	cmp	r3, #42	; 0x2a
 80016f8:	d12a      	bne.n	8001750 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016fa:	2102      	movs	r1, #2
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f001 f975 	bl	80029ec <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001710:	d11e      	bne.n	8001750 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001720:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8001730:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc63 	bl	8001002 <HAL_DMA_Abort_IT>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800174c:	4610      	mov	r0, r2
 800174e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2229      	movs	r2, #41	; 0x29
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001774:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	88fa      	ldrh	r2, [r7, #6]
 8001780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 8001796:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	0c1b      	lsrs	r3, r3, #16
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d103      	bne.n	80017b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2208      	movs	r2, #8
 80017b2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80017bc:	f248 0101 	movw	r1, #32769	; 0x8001
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f001 f8af 	bl	8002924 <I2C_Enable_IRQ>

    return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
  }
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	0800288b 	.word	0x0800288b
 80017d8:	08001a15 	.word	0x08001a15

080017dc <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80017f8:	2b28      	cmp	r3, #40	; 0x28
 80017fa:	f040 808a 	bne.w	8001912 <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d105      	bne.n	8001816 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07e      	b.n	8001914 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001816:	f248 0102 	movw	r1, #32770	; 0x8002
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f001 f8e6 	bl	80029ec <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 800182a:	2302      	movs	r3, #2
 800182c:	e072      	b.n	8001914 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b29      	cmp	r3, #41	; 0x29
 8001840:	d12a      	bne.n	8001898 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001842:	2101      	movs	r1, #1
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f001 f8d1 	bl	80029ec <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001858:	d11e      	bne.n	8001898 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001868:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	4a29      	ldr	r2, [pc, #164]	; (800191c <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 8001878:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fbbf 	bl	8001002 <HAL_DMA_Abort_IT>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001894:	4610      	mov	r0, r2
 8001896:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	222a      	movs	r2, #42	; 0x2a
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018bc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 80018de:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2208      	movs	r2, #8
 80018fa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001904:	f248 0102 	movw	r1, #32770	; 0x8002
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f001 f80b 	bl	8002924 <I2C_Enable_IRQ>

    return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
  }
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	0800288b 	.word	0x0800288b
 8001920:	08001a15 	.word	0x08001a15

08001924 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2b20      	cmp	r3, #32
 8001936:	d10d      	bne.n	8001954 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2228      	movs	r2, #40	; 0x28
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_I2C_EnableListen_IT+0x3c>)
 8001944:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 ffea 	bl	8002924 <I2C_Enable_IRQ>

    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e000      	b.n	8001956 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001954:	2302      	movs	r3, #2
  }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08001a15 	.word	0x08001a15

08001964 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	68f9      	ldr	r1, [r7, #12]
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
  }
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <I2C_Slave_ISR_IT+0x24>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e0ec      	b.n	8001c12 <I2C_Slave_ISR_IT+0x1fe>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fc9a 	bl	8002394 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d04d      	beq.n	8001b08 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d047      	beq.n	8001b08 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d128      	bne.n	8001ad4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b28      	cmp	r3, #40	; 0x28
 8001a8c:	d108      	bne.n	8001aa0 <I2C_Slave_ISR_IT+0x8c>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a94:	d104      	bne.n	8001aa0 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 fd85 	bl	80025a8 <I2C_ITListenCplt>
 8001a9e:	e032      	b.n	8001b06 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b29      	cmp	r3, #41	; 0x29
 8001aaa:	d10e      	bne.n	8001aca <I2C_Slave_ISR_IT+0xb6>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ab2:	d00a      	beq.n	8001aca <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fec0 	bl	8002842 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fb3d 	bl	8002142 <I2C_ITSlaveSeqCplt>
 8001ac8:	e01d      	b.n	8001b06 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2210      	movs	r2, #16
 8001ad0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001ad2:	e096      	b.n	8001c02 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <I2C_Slave_ISR_IT+0xe4>
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af4:	f040 8085 	bne.w	8001c02 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	4619      	mov	r1, r3
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fda8 	bl	8002654 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001b04:	e07d      	b.n	8001c02 <I2C_Slave_ISR_IT+0x1ee>
 8001b06:	e07c      	b.n	8001c02 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d030      	beq.n	8001b76 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d02a      	beq.n	8001b76 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d018      	beq.n	8001b5c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d14f      	bne.n	8001c06 <I2C_Slave_ISR_IT+0x1f2>
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b6c:	d04b      	beq.n	8001c06 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fae7 	bl	8002142 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b74:	e047      	b.n	8001c06 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	08db      	lsrs	r3, r3, #3
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d004      	beq.n	8001b98 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b8e:	6939      	ldr	r1, [r7, #16]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 fa15 	bl	8001fc0 <I2C_ITAddrCplt>
 8001b96:	e037      	b.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d031      	beq.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d02b      	beq.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d018      	beq.n	8001bec <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bea:	e00d      	b.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf2:	d002      	beq.n	8001bfa <I2C_Slave_ISR_IT+0x1e6>
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 faa1 	bl	8002142 <I2C_ITSlaveSeqCplt>
 8001c00:	e002      	b.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001c06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b088      	sub	sp, #32
 8001c1e:	af02      	add	r7, sp, #8
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <I2C_Master_ISR_DMA+0x1a>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0e1      	b.n	8001df8 <I2C_Master_ISR_DMA+0x1de>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d017      	beq.n	8001c78 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d011      	beq.n	8001c78 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2210      	movs	r2, #16
 8001c5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c68:	2120      	movs	r1, #32
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fe5a 	bl	8002924 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 fde6 	bl	8002842 <I2C_Flush_TXDR>
 8001c76:	e0ba      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	09db      	lsrs	r3, r3, #7
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d072      	beq.n	8001d6a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d06c      	beq.n	8001d6a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c9e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04e      	beq.n	8001d48 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d906      	bls.n	8001cd0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e010      	b.n	8001cf2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ce2:	d003      	beq.n	8001cec <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e002      	b.n	8001cf2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	8a79      	ldrh	r1, [r7, #18]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 fde1 	bl	80028c8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b22      	cmp	r3, #34	; 0x22
 8001d22:	d108      	bne.n	8001d36 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d34:	e05b      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d46:	e052      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d56:	d003      	beq.n	8001d60 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f9b5 	bl	80020c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d5e:	e046      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fc76 	bl	8002654 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d68:	e041      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d029      	beq.n	8001dca <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d023      	beq.n	8001dca <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d119      	bne.n	8001dc0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d9a:	d027      	beq.n	8001dec <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001da4:	d108      	bne.n	8001db8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001db6:	e019      	b.n	8001dec <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f985 	bl	80020c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001dbe:	e015      	b.n	8001dec <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001dc0:	2140      	movs	r1, #64	; 0x40
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fc46 	bl	8002654 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001dc8:	e010      	b.n	8001dec <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fa0b 	bl	8002200 <I2C_ITMasterCplt>
 8001dea:	e000      	b.n	8001dee <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001dec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <I2C_Slave_ISR_DMA+0x24>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0c9      	b.n	8001fb8 <I2C_Slave_ISR_DMA+0x1b8>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 faa4 	bl	8002394 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 809a 	beq.w	8001f8e <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8093 	beq.w	8001f8e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	0b9b      	lsrs	r3, r3, #14
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0bdb      	lsrs	r3, r3, #15
 8001e78:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d07f      	beq.n	8001f80 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0bdb      	lsrs	r3, r3, #15
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d007      	beq.n	8001ea4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0b9b      	lsrs	r3, r3, #14
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d128      	bne.n	8001f20 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b28      	cmp	r3, #40	; 0x28
 8001ed8:	d108      	bne.n	8001eec <I2C_Slave_ISR_DMA+0xec>
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ee0:	d104      	bne.n	8001eec <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fb5f 	bl	80025a8 <I2C_ITListenCplt>
 8001eea:	e048      	b.n	8001f7e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b29      	cmp	r3, #41	; 0x29
 8001ef6:	d10e      	bne.n	8001f16 <I2C_Slave_ISR_DMA+0x116>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001efe:	d00a      	beq.n	8001f16 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2210      	movs	r2, #16
 8001f06:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fc9a 	bl	8002842 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f917 	bl	8002142 <I2C_ITSlaveSeqCplt>
 8001f14:	e033      	b.n	8001f7e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001f1e:	e034      	b.n	8001f8a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f043 0204 	orr.w	r2, r3, #4
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f3a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <I2C_Slave_ISR_DMA+0x14a>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d11f      	bne.n	8001f8a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b21      	cmp	r3, #33	; 0x21
 8001f4e:	d002      	beq.n	8001f56 <I2C_Slave_ISR_DMA+0x156>
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b29      	cmp	r3, #41	; 0x29
 8001f54:	d103      	bne.n	8001f5e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2221      	movs	r2, #33	; 0x21
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5c:	e008      	b.n	8001f70 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b22      	cmp	r3, #34	; 0x22
 8001f62:	d002      	beq.n	8001f6a <I2C_Slave_ISR_DMA+0x16a>
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b2a      	cmp	r3, #42	; 0x2a
 8001f68:	d102      	bne.n	8001f70 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2222      	movs	r2, #34	; 0x22
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f74:	4619      	mov	r1, r3
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fb6c 	bl	8002654 <I2C_ITError>
      if (treatdmanack == 1U)
 8001f7c:	e005      	b.n	8001f8a <I2C_Slave_ISR_DMA+0x18a>
 8001f7e:	e004      	b.n	8001f8a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2210      	movs	r2, #16
 8001f86:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f88:	e011      	b.n	8001fae <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001f8a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f8c:	e00f      	b.n	8001fae <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	08db      	lsrs	r3, r3, #3
 8001f9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f809 	bl	8001fc0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fd6:	2b28      	cmp	r3, #40	; 0x28
 8001fd8:	d16a      	bne.n	80020b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	0c1b      	lsrs	r3, r3, #16
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ff8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	b29b      	uxth	r3, r3
 8002002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002006:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002014:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d138      	bne.n	8002090 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800201e:	897b      	ldrh	r3, [r7, #10]
 8002020:	09db      	lsrs	r3, r3, #7
 8002022:	b29a      	uxth	r2, r3
 8002024:	89bb      	ldrh	r3, [r7, #12]
 8002026:	4053      	eors	r3, r2
 8002028:	b29b      	uxth	r3, r3
 800202a:	f003 0306 	and.w	r3, r3, #6
 800202e:	2b00      	cmp	r3, #0
 8002030:	d11c      	bne.n	800206c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	2b02      	cmp	r3, #2
 8002046:	d13b      	bne.n	80020c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2208      	movs	r2, #8
 8002054:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800205e:	89ba      	ldrh	r2, [r7, #12]
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fb5d 	bl	8000724 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800206a:	e029      	b.n	80020c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800206c:	893b      	ldrh	r3, [r7, #8]
 800206e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fcb9 	bl	80029ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002082:	89ba      	ldrh	r2, [r7, #12]
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7fe fb4b 	bl	8000724 <HAL_I2C_AddrCallback>
}
 800208e:	e017      	b.n	80020c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fca9 	bl	80029ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80020a2:	89ba      	ldrh	r2, [r7, #12]
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	4619      	mov	r1, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe fb3b 	bl	8000724 <HAL_I2C_AddrCallback>
}
 80020ae:	e007      	b.n	80020c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b21      	cmp	r3, #33	; 0x21
 80020e2:	d115      	bne.n	8002110 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2211      	movs	r2, #17
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020f8:	2101      	movs	r1, #1
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fc76 	bl	80029ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fc45 	bl	8001998 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800210e:	e014      	b.n	800213a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2212      	movs	r2, #18
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002124:	2102      	movs	r1, #2
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fc60 	bl	80029ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fc39 	bl	80019ac <HAL_I2C_MasterRxCpltCallback>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	0b9b      	lsrs	r3, r3, #14
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e00d      	b.n	8002194 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	0bdb      	lsrs	r3, r3, #15
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002192:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b29      	cmp	r3, #41	; 0x29
 800219e:	d112      	bne.n	80021c6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2228      	movs	r2, #40	; 0x28
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2221      	movs	r2, #33	; 0x21
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021ae:	2101      	movs	r1, #1
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 fc1b 	bl	80029ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe fa62 	bl	8000688 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80021c4:	e017      	b.n	80021f6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b2a      	cmp	r3, #42	; 0x2a
 80021d0:	d111      	bne.n	80021f6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2228      	movs	r2, #40	; 0x28
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2222      	movs	r2, #34	; 0x22
 80021de:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021e0:	2102      	movs	r1, #2
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fc02 	bl	80029ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7fe fa5b 	bl	80006ac <HAL_I2C_SlaveRxCpltCallback>
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2220      	movs	r2, #32
 8002214:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b21      	cmp	r3, #33	; 0x21
 8002220:	d107      	bne.n	8002232 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002222:	2101      	movs	r1, #1
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fbe1 	bl	80029ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2211      	movs	r2, #17
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
 8002230:	e00c      	b.n	800224c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b22      	cmp	r3, #34	; 0x22
 800223c:	d106      	bne.n	800224c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800223e:	2102      	movs	r1, #2
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 fbd3 	bl	80029ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2212      	movs	r2, #18
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <I2C_ITMasterCplt+0x18c>)
 8002258:	400b      	ands	r3, r1
 800225a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4a      	ldr	r2, [pc, #296]	; (8002390 <I2C_ITMasterCplt+0x190>)
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d009      	beq.n	8002288 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2210      	movs	r2, #16
 800227a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f043 0204 	orr.w	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d10b      	bne.n	80022ac <I2C_ITMasterCplt+0xac>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80022aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fac8 	bl	8002842 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b60      	cmp	r3, #96	; 0x60
 80022c2:	d002      	beq.n	80022ca <I2C_ITMasterCplt+0xca>
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f9bf 	bl	8002654 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80022d6:	e054      	b.n	8002382 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b21      	cmp	r3, #33	; 0x21
 80022e2:	d124      	bne.n	800232e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d10b      	bne.n	8002316 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fb56 	bl	80019c0 <HAL_I2C_MemTxCpltCallback>
}
 8002314:	e035      	b.n	8002382 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff fb36 	bl	8001998 <HAL_I2C_MasterTxCpltCallback>
}
 800232c:	e029      	b.n	8002382 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b22      	cmp	r3, #34	; 0x22
 8002338:	d123      	bne.n	8002382 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b40      	cmp	r3, #64	; 0x40
 8002352:	d10b      	bne.n	800236c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fb35 	bl	80019d4 <HAL_I2C_MemRxCpltCallback>
}
 800236a:	e00a      	b.n	8002382 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fb15 	bl	80019ac <HAL_I2C_MasterRxCpltCallback>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	fe00e800 	.word	0xfe00e800
 8002390:	ffff0000 	.word	0xffff0000

08002394 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2220      	movs	r2, #32
 80023b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	2b21      	cmp	r3, #33	; 0x21
 80023be:	d002      	beq.n	80023c6 <I2C_ITSlaveCplt+0x32>
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	2b29      	cmp	r3, #41	; 0x29
 80023c4:	d108      	bne.n	80023d8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80023c6:	f248 0101 	movw	r1, #32769	; 0x8001
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fb0e 	bl	80029ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2221      	movs	r2, #33	; 0x21
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
 80023d6:	e00d      	b.n	80023f4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b22      	cmp	r3, #34	; 0x22
 80023dc:	d002      	beq.n	80023e4 <I2C_ITSlaveCplt+0x50>
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b2a      	cmp	r3, #42	; 0x2a
 80023e2:	d107      	bne.n	80023f4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023e4:	f248 0102 	movw	r1, #32770	; 0x8002
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 faff 	bl	80029ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2222      	movs	r2, #34	; 0x22
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b64      	ldr	r3, [pc, #400]	; (80025a0 <I2C_ITSlaveCplt+0x20c>)
 8002410:	400b      	ands	r3, r1
 8002412:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fa14 	bl	8002842 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	0b9b      	lsrs	r3, r3, #14
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d013      	beq.n	800244e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002434:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	2b00      	cmp	r3, #0
 800243c:	d020      	beq.n	8002480 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	b29a      	uxth	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800244c:	e018      	b.n	8002480 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	0bdb      	lsrs	r3, r3, #15
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002468:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b29a      	uxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d020      	beq.n	80024ce <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0304 	bic.w	r3, r3, #4
 8002492:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00c      	beq.n	80024ce <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d010      	beq.n	800251c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4619      	mov	r1, r3
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8a7 	bl	8002654 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b28      	cmp	r3, #40	; 0x28
 8002510:	d141      	bne.n	8002596 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002512:	6979      	ldr	r1, [r7, #20]
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f847 	bl	80025a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800251a:	e03c      	b.n	8002596 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002524:	d014      	beq.n	8002550 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fe0b 	bl	8002142 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <I2C_ITSlaveCplt+0x210>)
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fe f925 	bl	8000798 <HAL_I2C_ListenCpltCallback>
}
 800254e:	e022      	b.n	8002596 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b22      	cmp	r3, #34	; 0x22
 800255a:	d10e      	bne.n	800257a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe f89a 	bl	80006ac <HAL_I2C_SlaveRxCpltCallback>
}
 8002578:	e00d      	b.n	8002596 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe f879 	bl	8000688 <HAL_I2C_SlaveTxCpltCallback>
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	fe00e800 	.word	0xfe00e800
 80025a4:	ffff0000 	.word	0xffff0000

080025a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a26      	ldr	r2, [pc, #152]	; (8002650 <I2C_ITListenCplt+0xa8>)
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d022      	beq.n	8002626 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0204 	orr.w	r2, r3, #4
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002626:	f248 0103 	movw	r1, #32771	; 0x8003
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f9de 	bl	80029ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2210      	movs	r2, #16
 8002636:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe f8a9 	bl	8000798 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	ffff0000 	.word	0xffff0000

08002654 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a5d      	ldr	r2, [pc, #372]	; (80027e8 <I2C_ITError+0x194>)
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b28      	cmp	r3, #40	; 0x28
 800268a:	d005      	beq.n	8002698 <I2C_ITError+0x44>
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b29      	cmp	r3, #41	; 0x29
 8002690:	d002      	beq.n	8002698 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b2a      	cmp	r3, #42	; 0x2a
 8002696:	d10b      	bne.n	80026b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002698:	2103      	movs	r1, #3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f9a6 	bl	80029ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2228      	movs	r2, #40	; 0x28
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a50      	ldr	r2, [pc, #320]	; (80027ec <I2C_ITError+0x198>)
 80026ac:	635a      	str	r2, [r3, #52]	; 0x34
 80026ae:	e011      	b.n	80026d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80026b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f999 	bl	80029ec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b60      	cmp	r3, #96	; 0x60
 80026c4:	d003      	beq.n	80026ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d039      	beq.n	8002756 <I2C_ITError+0x102>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b11      	cmp	r3, #17
 80026e6:	d002      	beq.n	80026ee <I2C_ITError+0x9a>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b21      	cmp	r3, #33	; 0x21
 80026ec:	d133      	bne.n	8002756 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fc:	d107      	bne.n	800270e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800270c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fcb3 	bl	800107e <HAL_DMA_GetState>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d017      	beq.n	800274e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <I2C_ITError+0x19c>)
 8002724:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc65 	bl	8001002 <HAL_DMA_Abort_IT>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04d      	beq.n	80027da <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002748:	4610      	mov	r0, r2
 800274a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800274c:	e045      	b.n	80027da <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f850 	bl	80027f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002754:	e041      	b.n	80027da <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d039      	beq.n	80027d2 <I2C_ITError+0x17e>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b12      	cmp	r3, #18
 8002762:	d002      	beq.n	800276a <I2C_ITError+0x116>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b22      	cmp	r3, #34	; 0x22
 8002768:	d133      	bne.n	80027d2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002778:	d107      	bne.n	800278a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002788:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc75 	bl	800107e <HAL_DMA_GetState>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d017      	beq.n	80027ca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <I2C_ITError+0x19c>)
 80027a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe fc27 	bl	8001002 <HAL_DMA_Abort_IT>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d011      	beq.n	80027de <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027c4:	4610      	mov	r0, r2
 80027c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027c8:	e009      	b.n	80027de <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f812 	bl	80027f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027d0:	e005      	b.n	80027de <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f80e 	bl	80027f4 <I2C_TreatErrorCallback>
  }
}
 80027d8:	e002      	b.n	80027e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027da:	bf00      	nop
 80027dc:	e000      	b.n	80027e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027de:	bf00      	nop
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	ffff0000 	.word	0xffff0000
 80027ec:	08001a15 	.word	0x08001a15
 80027f0:	0800288b 	.word	0x0800288b

080027f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b60      	cmp	r3, #96	; 0x60
 8002806:	d10e      	bne.n	8002826 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff f8e2 	bl	80019e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002824:	e009      	b.n	800283a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd ffb9 	bl	80007ac <HAL_I2C_ErrorCallback>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b02      	cmp	r3, #2
 8002856:	d103      	bne.n	8002860 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d007      	beq.n	800287e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f042 0201 	orr.w	r2, r2, #1
 800287c:	619a      	str	r2, [r3, #24]
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b084      	sub	sp, #16
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	2200      	movs	r2, #0
 80028a6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	2200      	movs	r2, #0
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff ff9b 	bl	80027f4 <I2C_TreatErrorCallback>
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	460b      	mov	r3, r1
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	4613      	mov	r3, r2
 80028d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	0d5b      	lsrs	r3, r3, #21
 80028e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <I2C_TransferConfig+0x58>)
 80028ea:	430b      	orrs	r3, r1
 80028ec:	43db      	mvns	r3, r3
 80028ee:	ea02 0103 	and.w	r1, r2, r3
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028f8:	7a7b      	ldrb	r3, [r7, #9]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	431a      	orrs	r2, r3
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	431a      	orrs	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	03ff63ff 	.word	0x03ff63ff

08002924 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	4a2a      	ldr	r2, [pc, #168]	; (80029e4 <I2C_Enable_IRQ+0xc0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002942:	4a29      	ldr	r2, [pc, #164]	; (80029e8 <I2C_Enable_IRQ+0xc4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d11d      	bne.n	8002984 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	da03      	bge.n	8002958 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002956:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002958:	887b      	ldrh	r3, [r7, #2]
 800295a:	2b10      	cmp	r3, #16
 800295c:	d103      	bne.n	8002966 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002964:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	2b20      	cmp	r3, #32
 800296a:	d103      	bne.n	8002974 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002972:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d125      	bne.n	80029c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002982:	e020      	b.n	80029c6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002984:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002988:	2b00      	cmp	r3, #0
 800298a:	da03      	bge.n	8002994 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002992:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80029a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80029b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d103      	bne.n	80029c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	08001c1b 	.word	0x08001c1b
 80029e8:	08001e01 	.word	0x08001e01

080029ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00f      	beq.n	8002a26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002a0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a1a:	2b28      	cmp	r3, #40	; 0x28
 8002a1c:	d003      	beq.n	8002a26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002a26:	887b      	ldrh	r3, [r7, #2]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00f      	beq.n	8002a50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002a36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a44:	2b28      	cmp	r3, #40	; 0x28
 8002a46:	d003      	beq.n	8002a50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	da03      	bge.n	8002a60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a60:	887b      	ldrh	r3, [r7, #2]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d103      	bne.n	8002a6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d103      	bne.n	8002a7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f043 0320 	orr.w	r3, r3, #32
 8002a7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	2b40      	cmp	r3, #64	; 0x40
 8002a80:	d103      	bne.n	8002a8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6819      	ldr	r1, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43da      	mvns	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	400a      	ands	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	d138      	bne.n	8002b30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e032      	b.n	8002b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002afa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b085      	sub	sp, #20
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d139      	bne.n	8002bc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e033      	b.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2224      	movs	r2, #36	; 0x24
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd8:	b08b      	sub	sp, #44	; 0x2c
 8002bda:	af06      	add	r7, sp, #24
 8002bdc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0d0      	b.n	8002d8a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fd fff7 	bl	8000bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fda8 	bl	8005764 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e04c      	b.n	8002cb4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	b298      	uxth	r0, r3
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	3336      	adds	r3, #54	; 0x36
 8002c58:	4602      	mov	r2, r0
 8002c5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	440b      	add	r3, r1
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	333c      	adds	r3, #60	; 0x3c
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3340      	adds	r3, #64	; 0x40
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3ad      	bcc.n	8002c1a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e044      	b.n	8002d4e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3b5      	bcc.n	8002cc4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	602b      	str	r3, [r5, #0]
 8002d6e:	1d33      	adds	r3, r6, #4
 8002d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f002 fd11 	bl	800579a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f001 b823 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 817d 	beq.w	80030ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002dd0:	4bbc      	ldr	r3, [pc, #752]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 030c 	and.w	r3, r3, #12
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ddc:	4bb9      	ldr	r3, [pc, #740]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d15c      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x10e>
 8002de8:	4bb6      	ldr	r3, [pc, #728]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df4:	d155      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x10e>
 8002df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_RCC_OscConfig+0x94>
 8002e22:	4ba8      	ldr	r3, [pc, #672]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	e015      	b.n	8002e54 <HAL_RCC_OscConfig+0xc0>
 8002e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e50:	4b9c      	ldr	r3, [pc, #624]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002e5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002e68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002e6c:	fab2 f282 	clz	r2, r2
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	f042 0220 	orr.w	r2, r2, #32
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	f002 021f 	and.w	r2, r2, #31
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 811f 	beq.w	80030c8 <HAL_RCC_OscConfig+0x334>
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 8116 	bne.w	80030c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f000 bfaf 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12e>
 8002eb4:	4b83      	ldr	r3, [pc, #524]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a82      	ldr	r2, [pc, #520]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e036      	b.n	8002f30 <HAL_RCC_OscConfig+0x19c>
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x158>
 8002ed2:	4b7c      	ldr	r3, [pc, #496]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7b      	ldr	r2, [pc, #492]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a78      	ldr	r2, [pc, #480]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e021      	b.n	8002f30 <HAL_RCC_OscConfig+0x19c>
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x184>
 8002efe:	4b71      	ldr	r3, [pc, #452]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a70      	ldr	r2, [pc, #448]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6e      	ldr	r3, [pc, #440]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6d      	ldr	r2, [pc, #436]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0x19c>
 8002f18:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a66      	ldr	r2, [pc, #408]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f30:	4b64      	ldr	r3, [pc, #400]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f023 020f 	bic.w	r2, r3, #15
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	495f      	ldr	r1, [pc, #380]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d059      	beq.n	800300e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5a:	f7fd ff11 	bl	8000d80 <HAL_GetTick>
 8002f5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fd ff0c 	bl	8000d80 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d902      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	f000 bf43 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 8002f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	095b      	lsrs	r3, r3, #5
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d102      	bne.n	8002fac <HAL_RCC_OscConfig+0x218>
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	e015      	b.n	8002fd8 <HAL_RCC_OscConfig+0x244>
 8002fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002fd4:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002fe0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002fe4:	fa92 f2a2 	rbit	r2, r2
 8002fe8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002fec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	f042 0220 	orr.w	r2, r2, #32
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	f002 021f 	and.w	r2, r2, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f202 	lsl.w	r2, r1, r2
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ab      	beq.n	8002f64 <HAL_RCC_OscConfig+0x1d0>
 800300c:	e05d      	b.n	80030ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fd feb7 	bl	8000d80 <HAL_GetTick>
 8003012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	e00a      	b.n	800302e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fd feb2 	bl	8000d80 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b64      	cmp	r3, #100	; 0x64
 8003026:	d902      	bls.n	800302e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	f000 bee9 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 800302e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003032:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_RCC_OscConfig+0x2cc>
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e015      	b.n	800308c <HAL_RCC_OscConfig+0x2f8>
 8003060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003064:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800307c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCC_OscConfig+0x330>)
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003090:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003094:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003098:	fa92 f2a2 	rbit	r2, r2
 800309c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1ab      	bne.n	8003018 <HAL_RCC_OscConfig+0x284>
 80030c0:	e003      	b.n	80030ca <HAL_RCC_OscConfig+0x336>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 817d 	beq.w	80033da <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030e0:	4ba6      	ldr	r3, [pc, #664]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030ec:	4ba3      	ldr	r3, [pc, #652]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d172      	bne.n	80031de <HAL_RCC_OscConfig+0x44a>
 80030f8:	4ba0      	ldr	r3, [pc, #640]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d16c      	bne.n	80031de <HAL_RCC_OscConfig+0x44a>
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003116:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d102      	bne.n	8003134 <HAL_RCC_OscConfig+0x3a0>
 800312e:	4b93      	ldr	r3, [pc, #588]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e013      	b.n	800315c <HAL_RCC_OscConfig+0x3c8>
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800314c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003158:	4b88      	ldr	r3, [pc, #544]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2202      	movs	r2, #2
 800315e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003162:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003166:	fa92 f2a2 	rbit	r2, r2
 800316a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800316e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003172:	fab2 f282 	clz	r2, r2
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f002 021f 	and.w	r2, r2, #31
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCC_OscConfig+0x410>
 800318e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f000 be2e 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	21f8      	movs	r1, #248	; 0xf8
 80031ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031c2:	fa91 f1a1 	rbit	r1, r1
 80031c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031ce:	fab1 f181 	clz	r1, r1
 80031d2:	b2c9      	uxtb	r1, r1
 80031d4:	408b      	lsls	r3, r1
 80031d6:	4969      	ldr	r1, [pc, #420]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031dc:	e0fd      	b.n	80033da <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8088 	beq.w	8003300 <HAL_RCC_OscConfig+0x56c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2301      	movs	r3, #1
 800321a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fd fdb0 	bl	8000d80 <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003226:	f7fd fdab 	bl	8000d80 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	f000 bde2 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 800323c:	2302      	movs	r3, #2
 800323e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800324e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_RCC_OscConfig+0x4d8>
 8003266:	4b45      	ldr	r3, [pc, #276]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e013      	b.n	8003294 <HAL_RCC_OscConfig+0x500>
 800326c:	2302      	movs	r3, #2
 800326e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800327e:	2302      	movs	r3, #2
 8003280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003284:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003290:	4b3a      	ldr	r3, [pc, #232]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2202      	movs	r2, #2
 8003296:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800329a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032aa:	fab2 f282 	clz	r2, r2
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f042 0220 	orr.w	r2, r2, #32
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	f002 021f 	and.w	r2, r2, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f202 	lsl.w	r2, r1, r2
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0af      	beq.n	8003226 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	21f8      	movs	r1, #248	; 0xf8
 80032dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032e4:	fa91 f1a1 	rbit	r1, r1
 80032e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032f0:	fab1 f181 	clz	r1, r1
 80032f4:	b2c9      	uxtb	r1, r1
 80032f6:	408b      	lsls	r3, r1
 80032f8:	4920      	ldr	r1, [pc, #128]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	600b      	str	r3, [r1, #0]
 80032fe:	e06c      	b.n	80033da <HAL_RCC_OscConfig+0x646>
 8003300:	2301      	movs	r3, #1
 8003302:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800330a:	fa93 f3a3 	rbit	r3, r3
 800330e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fd fd28 	bl	8000d80 <HAL_GetTick>
 8003330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003336:	f7fd fd23 	bl	8000d80 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d902      	bls.n	800334c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	f000 bd5a 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 800334c:	2302      	movs	r3, #2
 800334e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800335e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	095b      	lsrs	r3, r3, #5
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <HAL_RCC_OscConfig+0x5ec>
 8003376:	4b01      	ldr	r3, [pc, #4]	; (800337c <HAL_RCC_OscConfig+0x5e8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	e015      	b.n	80033a8 <HAL_RCC_OscConfig+0x614>
 800337c:	40021000 	.word	0x40021000
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003398:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033a4:	4bc8      	ldr	r3, [pc, #800]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2202      	movs	r2, #2
 80033aa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ad      	bne.n	8003336 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8110 	beq.w	8003610 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d079      	beq.n	80034f4 <HAL_RCC_OscConfig+0x760>
 8003400:	2301      	movs	r3, #1
 8003402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003412:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	4bab      	ldr	r3, [pc, #684]	; (80036cc <HAL_RCC_OscConfig+0x938>)
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	461a      	mov	r2, r3
 8003426:	2301      	movs	r3, #1
 8003428:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fca9 	bl	8000d80 <HAL_GetTick>
 800342e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd fca4 	bl	8000d80 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d902      	bls.n	800344a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	f000 bcdb 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800345c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003460:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003464:	2202      	movs	r2, #2
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003488:	2202      	movs	r2, #2
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	fa93 f2a3 	rbit	r2, r3
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 80034a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034b0:	2102      	movs	r1, #2
 80034b2:	6019      	str	r1, [r3, #0]
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f1a3 	rbit	r1, r3
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034ca:	6019      	str	r1, [r3, #0]
  return result;
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2101      	movs	r1, #1
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0a0      	beq.n	8003434 <HAL_RCC_OscConfig+0x6a0>
 80034f2:	e08d      	b.n	8003610 <HAL_RCC_OscConfig+0x87c>
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fa93 f2a3 	rbit	r2, r3
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003516:	601a      	str	r2, [r3, #0]
  return result;
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003520:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_OscConfig+0x938>)
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	461a      	mov	r2, r3
 8003532:	2300      	movs	r3, #0
 8003534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003536:	f7fd fc23 	bl	8000d80 <HAL_GetTick>
 800353a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003540:	f7fd fc1e 	bl	8000d80 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d902      	bls.n	8003556 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	f000 bc55 	b.w	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800355e:	2202      	movs	r2, #2
 8003560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	fa93 f2a3 	rbit	r2, r3
 8003570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003574:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003582:	2202      	movs	r2, #2
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	fa93 f2a3 	rbit	r2, r3
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f2a3 	rbit	r2, r3
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c2:	4b41      	ldr	r3, [pc, #260]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 80035c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035ce:	2102      	movs	r1, #2
 80035d0:	6019      	str	r1, [r3, #0]
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f1a3 	rbit	r1, r3
 80035e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035e8:	6019      	str	r1, [r3, #0]
  return result;
 80035ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d197      	bne.n	8003540 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 81a1 	beq.w	8003968 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a22      	ldr	r2, [pc, #136]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800365e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003660:	2301      	movs	r3, #1
 8003662:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <HAL_RCC_OscConfig+0x93c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d11a      	bne.n	80036a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_RCC_OscConfig+0x93c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <HAL_RCC_OscConfig+0x93c>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7fd fb7f 	bl	8000d80 <HAL_GetTick>
 8003682:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	e009      	b.n	800369c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003688:	f7fd fb7a 	bl	8000d80 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b64      	cmp	r3, #100	; 0x64
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e3b1      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <HAL_RCC_OscConfig+0x93c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ef      	beq.n	8003688 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d10d      	bne.n	80036d4 <HAL_RCC_OscConfig+0x940>
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a02      	ldr	r2, [pc, #8]	; (80036c8 <HAL_RCC_OscConfig+0x934>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	e03c      	b.n	8003740 <HAL_RCC_OscConfig+0x9ac>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
 80036cc:	10908120 	.word	0x10908120
 80036d0:	40007000 	.word	0x40007000
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10c      	bne.n	80036fe <HAL_RCC_OscConfig+0x96a>
 80036e4:	4bc1      	ldr	r3, [pc, #772]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4ac0      	ldr	r2, [pc, #768]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80036ea:	f023 0301 	bic.w	r3, r3, #1
 80036ee:	6213      	str	r3, [r2, #32]
 80036f0:	4bbe      	ldr	r3, [pc, #760]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4abd      	ldr	r2, [pc, #756]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80036f6:	f023 0304 	bic.w	r3, r3, #4
 80036fa:	6213      	str	r3, [r2, #32]
 80036fc:	e020      	b.n	8003740 <HAL_RCC_OscConfig+0x9ac>
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b05      	cmp	r3, #5
 800370c:	d10c      	bne.n	8003728 <HAL_RCC_OscConfig+0x994>
 800370e:	4bb7      	ldr	r3, [pc, #732]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4ab6      	ldr	r2, [pc, #728]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6213      	str	r3, [r2, #32]
 800371a:	4bb4      	ldr	r3, [pc, #720]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4ab3      	ldr	r2, [pc, #716]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6213      	str	r3, [r2, #32]
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x9ac>
 8003728:	4bb0      	ldr	r3, [pc, #704]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4aaf      	ldr	r2, [pc, #700]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	4bad      	ldr	r3, [pc, #692]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4aac      	ldr	r2, [pc, #688]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8081 	beq.w	8003854 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fd fb15 	bl	8000d80 <HAL_GetTick>
 8003756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f7fd fb10 	bl	8000d80 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e345      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800377c:	2202      	movs	r2, #2
 800377e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	fa93 f2a3 	rbit	r2, r3
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037a0:	2202      	movs	r2, #2
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037ba:	601a      	str	r2, [r3, #0]
  return result;
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_OscConfig+0xa4c>
 80037da:	4b84      	ldr	r3, [pc, #528]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	e013      	b.n	8003808 <HAL_RCC_OscConfig+0xa74>
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037e8:	2202      	movs	r2, #2
 80037ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fa93 f2a3 	rbit	r2, r3
 80037fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4b79      	ldr	r3, [pc, #484]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003810:	2102      	movs	r1, #2
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003818:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	fa92 f1a2 	rbit	r1, r2
 8003822:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003826:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800382a:	6011      	str	r1, [r2, #0]
  return result;
 800382c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003830:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	fab2 f282 	clz	r2, r2
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	f002 021f 	and.w	r2, r2, #31
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d084      	beq.n	800375c <HAL_RCC_OscConfig+0x9c8>
 8003852:	e07f      	b.n	8003954 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003854:	f7fd fa94 	bl	8000d80 <HAL_GetTick>
 8003858:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00b      	b.n	8003876 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fd fa8f 	bl	8000d80 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e2c4      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800387e:	2202      	movs	r2, #2
 8003880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	fa93 f2a3 	rbit	r2, r3
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038a2:	2202      	movs	r2, #2
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038bc:	601a      	str	r2, [r3, #0]
  return result;
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <HAL_RCC_OscConfig+0xb4e>
 80038dc:	4b43      	ldr	r3, [pc, #268]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	e013      	b.n	800390a <HAL_RCC_OscConfig+0xb76>
 80038e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038ea:	2202      	movs	r2, #2
 80038ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	fa93 f2a3 	rbit	r2, r3
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003904:	601a      	str	r2, [r3, #0]
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003912:	2102      	movs	r1, #2
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800391a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fa92 f1a2 	rbit	r1, r2
 8003924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003928:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800392c:	6011      	str	r1, [r2, #0]
  return result;
 800392e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003932:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	fab2 f282 	clz	r2, r2
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	f002 021f 	and.w	r2, r2, #31
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d184      	bne.n	800385e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003954:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800396c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8242 	beq.w	8003dfe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <HAL_RCC_OscConfig+0xc58>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	f000 8213 	beq.w	8003dae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	2b02      	cmp	r3, #2
 8003996:	f040 8162 	bne.w	8003c5e <HAL_RCC_OscConfig+0xeca>
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	fa93 f2a3 	rbit	r2, r3
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039be:	601a      	str	r2, [r3, #0]
  return result;
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	fab3 f383 	clz	r3, r3
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	461a      	mov	r2, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd f9ce 	bl	8000d80 <HAL_GetTick>
 80039e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e8:	e00c      	b.n	8003a04 <HAL_RCC_OscConfig+0xc70>
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd f9c6 	bl	8000d80 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e1fd      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a28:	601a      	str	r2, [r3, #0]
  return result;
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a32:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <HAL_RCC_OscConfig+0xcba>
 8003a48:	4bb0      	ldr	r3, [pc, #704]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	e027      	b.n	8003a9e <HAL_RCC_OscConfig+0xd0a>
 8003a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a52:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	fa93 f2a3 	rbit	r2, r3
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fa93 f2a3 	rbit	r2, r3
 8003a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a94:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	4b9c      	ldr	r3, [pc, #624]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aa2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003aa6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aaa:	6011      	str	r1, [r2, #0]
 8003aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	fa92 f1a2 	rbit	r1, r2
 8003aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003abe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ac2:	6011      	str	r1, [r2, #0]
  return result;
 8003ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	fab2 f282 	clz	r2, r2
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	f042 0220 	orr.w	r2, r2, #32
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	f002 021f 	and.w	r2, r2, #31
 8003ade:	2101      	movs	r1, #1
 8003ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d182      	bne.n	80039f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aea:	4b88      	ldr	r3, [pc, #544]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	497f      	ldr	r1, [pc, #508]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b24:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	fa93 f2a3 	rbit	r2, r3
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b36:	601a      	str	r2, [r3, #0]
  return result;
 8003b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b40:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fd f912 	bl	8000d80 <HAL_GetTick>
 8003b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b60:	e009      	b.n	8003b76 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b62:	f7fd f90d 	bl	8000d80 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e144      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	fa93 f2a3 	rbit	r2, r3
 8003b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b9a:	601a      	str	r2, [r3, #0]
  return result;
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ba4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xe2c>
 8003bba:	4b54      	ldr	r3, [pc, #336]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	e027      	b.n	8003c10 <HAL_RCC_OscConfig+0xe7c>
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	4b3f      	ldr	r3, [pc, #252]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c14:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c1c:	6011      	str	r1, [r2, #0]
 8003c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c22:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fa92 f1a2 	rbit	r1, r2
 8003c2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c30:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c34:	6011      	str	r1, [r2, #0]
  return result;
 8003c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	fab2 f282 	clz	r2, r2
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	f042 0220 	orr.w	r2, r2, #32
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	f002 021f 	and.w	r2, r2, #31
 8003c50:	2101      	movs	r1, #1
 8003c52:	fa01 f202 	lsl.w	r2, r1, r2
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d082      	beq.n	8003b62 <HAL_RCC_OscConfig+0xdce>
 8003c5c:	e0cf      	b.n	8003dfe <HAL_RCC_OscConfig+0x106a>
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c82:	601a      	str	r2, [r3, #0]
  return result;
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f86c 	bl	8000d80 <HAL_GetTick>
 8003ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fd f867 	bl	8000d80 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e09e      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	fa93 f2a3 	rbit	r2, r3
 8003cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003ce6:	601a      	str	r2, [r3, #0]
  return result;
 8003ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d104      	bne.n	8003d10 <HAL_RCC_OscConfig+0xf7c>
 8003d06:	4b01      	ldr	r3, [pc, #4]	; (8003d0c <HAL_RCC_OscConfig+0xf78>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e029      	b.n	8003d60 <HAL_RCC_OscConfig+0xfcc>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d14:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d3a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d48:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	fa93 f2a3 	rbit	r2, r3
 8003d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d56:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	4b2b      	ldr	r3, [pc, #172]	; (8003e0c <HAL_RCC_OscConfig+0x1078>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d64:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d6c:	6011      	str	r1, [r2, #0]
 8003d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d72:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	fa92 f1a2 	rbit	r1, r2
 8003d7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d80:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d84:	6011      	str	r1, [r2, #0]
  return result;
 8003d86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d8a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	fab2 f282 	clz	r2, r2
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	f042 0220 	orr.w	r2, r2, #32
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	f002 021f 	and.w	r2, r2, #31
 8003da0:	2101      	movs	r1, #1
 8003da2:	fa01 f202 	lsl.w	r2, r1, r2
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d180      	bne.n	8003cae <HAL_RCC_OscConfig+0xf1a>
 8003dac:	e027      	b.n	8003dfe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e01e      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_RCC_OscConfig+0x1078>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003dce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003de2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d001      	beq.n	8003dfe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b09e      	sub	sp, #120	; 0x78
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e162      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e28:	4b90      	ldr	r3, [pc, #576]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d910      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e36:	4b8d      	ldr	r3, [pc, #564]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	498b      	ldr	r1, [pc, #556]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b89      	ldr	r3, [pc, #548]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e14a      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b82      	ldr	r3, [pc, #520]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	497f      	ldr	r1, [pc, #508]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80dc 	beq.w	800403c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d13c      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xf6>
 8003e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xa6>
 8003eb0:	4b6f      	ldr	r3, [pc, #444]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	e00f      	b.n	8003ed6 <HAL_RCC_ClockConfig+0xc6>
 8003eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8003eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ed2:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8003edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ede:	fa92 f2a2 	rbit	r2, r2
 8003ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ee6:	fab2 f282 	clz	r2, r2
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	f042 0220 	orr.w	r2, r2, #32
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	f002 021f 	and.w	r2, r2, #31
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d17b      	bne.n	8003ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0f3      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d13c      	bne.n	8003f88 <HAL_RCC_ClockConfig+0x178>
 8003f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x128>
 8003f32:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e00f      	b.n	8003f58 <HAL_RCC_ClockConfig+0x148>
 8003f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
 8003f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f54:	4b46      	ldr	r3, [pc, #280]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f60:	fa92 f2a2 	rbit	r2, r2
 8003f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f68:	fab2 f282 	clz	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	f042 0220 	orr.w	r2, r2, #32
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f002 021f 	and.w	r2, r2, #31
 8003f78:	2101      	movs	r1, #1
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d13a      	bne.n	8003ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0b2      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x1a0>
 8003faa:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	e00d      	b.n	8003fcc <HAL_RCC_ClockConfig+0x1bc>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	fa93 f3a3 	rbit	r3, r3
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	623b      	str	r3, [r7, #32]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	61fb      	str	r3, [r7, #28]
 8003fc8:	4b29      	ldr	r3, [pc, #164]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2202      	movs	r2, #2
 8003fce:	61ba      	str	r2, [r7, #24]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	fa92 f2a2 	rbit	r2, r2
 8003fd6:	617a      	str	r2, [r7, #20]
  return result;
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	fab2 f282 	clz	r2, r2
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f042 0220 	orr.w	r2, r2, #32
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	f002 021f 	and.w	r2, r2, #31
 8003fea:	2101      	movs	r1, #1
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e079      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4b1d      	ldr	r3, [pc, #116]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f023 0203 	bic.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	491a      	ldr	r1, [pc, #104]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800400c:	f7fc feb8 	bl	8000d80 <HAL_GetTick>
 8004010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004012:	e00a      	b.n	800402a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004014:	f7fc feb4 	bl	8000d80 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e061      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	4b11      	ldr	r3, [pc, #68]	; (8004070 <HAL_RCC_ClockConfig+0x260>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 020c 	and.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	429a      	cmp	r2, r3
 800403a:	d1eb      	bne.n	8004014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d214      	bcs.n	8004074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b08      	ldr	r3, [pc, #32]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	4906      	ldr	r1, [pc, #24]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_RCC_ClockConfig+0x25c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e040      	b.n	80040ee <HAL_RCC_ClockConfig+0x2de>
 800406c:	40022000 	.word	0x40022000
 8004070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCC_ClockConfig+0x2e8>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	491a      	ldr	r1, [pc, #104]	; (80040f8 <HAL_RCC_ClockConfig+0x2e8>)
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x2e8>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4912      	ldr	r1, [pc, #72]	; (80040f8 <HAL_RCC_ClockConfig+0x2e8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040b2:	f000 f829 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040b6:	4601      	mov	r1, r0
 80040b8:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_RCC_ClockConfig+0x2e8>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	22f0      	movs	r2, #240	; 0xf0
 80040c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	fa92 f2a2 	rbit	r2, r2
 80040ca:	60fa      	str	r2, [r7, #12]
  return result;
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	fab2 f282 	clz	r2, r2
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	40d3      	lsrs	r3, r2
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x2ec>)
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	fa21 f303 	lsr.w	r3, r1, r3
 80040de:	4a08      	ldr	r2, [pc, #32]	; (8004100 <HAL_RCC_ClockConfig+0x2f0>)
 80040e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80040e2:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_RCC_ClockConfig+0x2f4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fe06 	bl	8000cf8 <HAL_InitTick>
  
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3778      	adds	r7, #120	; 0x78
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	08005a64 	.word	0x08005a64
 8004100:	20000000 	.word	0x20000000
 8004104:	20000004 	.word	0x20000004

08004108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	b08b      	sub	sp, #44	; 0x2c
 800410c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004122:	4b29      	ldr	r3, [pc, #164]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b04      	cmp	r3, #4
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x30>
 8004132:	2b08      	cmp	r3, #8
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x36>
 8004136:	e03c      	b.n	80041b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004138:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800413a:	623b      	str	r3, [r7, #32]
      break;
 800413c:	e03c      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004144:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004148:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	607a      	str	r2, [r7, #4]
  return result;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	40d3      	lsrs	r3, r2
 800415c:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800415e:	5cd3      	ldrb	r3, [r2, r3]
 8004160:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	220f      	movs	r2, #15
 800416c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	fa92 f2a2 	rbit	r2, r2
 8004174:	60fa      	str	r2, [r7, #12]
  return result;
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	fab2 f282 	clz	r2, r2
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	40d3      	lsrs	r3, r2
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004190:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	fbb2 f2f3 	udiv	r2, r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
 80041a0:	e004      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	623b      	str	r3, [r7, #32]
      break;
 80041b0:	e002      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b4:	623b      	str	r3, [r7, #32]
      break;
 80041b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	372c      	adds	r7, #44	; 0x2c
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	007a1200 	.word	0x007a1200
 80041d0:	08005a74 	.word	0x08005a74
 80041d4:	08005a84 	.word	0x08005a84
 80041d8:	003d0900 	.word	0x003d0900

080041dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b092      	sub	sp, #72	; 0x48
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80d4 	beq.w	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004200:	4b4e      	ldr	r3, [pc, #312]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10e      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420c:	4b4b      	ldr	r3, [pc, #300]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	4a4a      	ldr	r2, [pc, #296]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	61d3      	str	r3, [r2, #28]
 8004218:	4b48      	ldr	r3, [pc, #288]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422a:	4b45      	ldr	r3, [pc, #276]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	2b00      	cmp	r3, #0
 8004234:	d118      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004236:	4b42      	ldr	r3, [pc, #264]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a41      	ldr	r2, [pc, #260]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004242:	f7fc fd9d 	bl	8000d80 <HAL_GetTick>
 8004246:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	e008      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fc fd99 	bl	8000d80 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b64      	cmp	r3, #100	; 0x64
 8004256:	d901      	bls.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e169      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b38      	ldr	r3, [pc, #224]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004268:	4b34      	ldr	r3, [pc, #208]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8084 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004282:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004284:	429a      	cmp	r2, r3
 8004286:	d07c      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004288:	4b2c      	ldr	r3, [pc, #176]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004292:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004296:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b26      	ldr	r3, [pc, #152]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	461a      	mov	r2, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	fa93 f3a3 	rbit	r3, r3
 80042c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042d0:	4413      	add	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042da:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04b      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ea:	f7fc fd49 	bl	8000d80 <HAL_GetTick>
 80042ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f0:	e00a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fc fd45 	bl	8000d80 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e113      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004308:	2302      	movs	r3, #2
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	2302      	movs	r3, #2
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	61fb      	str	r3, [r7, #28]
  return result;
 8004320:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d108      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004336:	4b01      	ldr	r3, [pc, #4]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	e00d      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
 8004344:	10908100 	.word	0x10908100
 8004348:	2302      	movs	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fa93 f3a3 	rbit	r3, r3
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	4b78      	ldr	r3, [pc, #480]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2202      	movs	r2, #2
 800435a:	613a      	str	r2, [r7, #16]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	fa92 f2a2 	rbit	r2, r2
 8004362:	60fa      	str	r2, [r7, #12]
  return result;
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	fab2 f282 	clz	r2, r2
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	f002 021f 	and.w	r2, r2, #31
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f202 	lsl.w	r2, r1, r2
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0b7      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004382:	4b6d      	ldr	r3, [pc, #436]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	496a      	ldr	r1, [pc, #424]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004390:	4313      	orrs	r3, r2
 8004392:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b4:	4b60      	ldr	r3, [pc, #384]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	495d      	ldr	r1, [pc, #372]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d2:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4956      	ldr	r1, [pc, #344]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f0:	4b51      	ldr	r3, [pc, #324]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	494e      	ldr	r1, [pc, #312]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d008      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440e:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f023 0210 	bic.w	r2, r3, #16
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4947      	ldr	r1, [pc, #284]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	493f      	ldr	r1, [pc, #252]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f023 0220 	bic.w	r2, r3, #32
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4938      	ldr	r1, [pc, #224]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004468:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	4930      	ldr	r1, [pc, #192]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004486:	4b2c      	ldr	r3, [pc, #176]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	4929      	ldr	r1, [pc, #164]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004494:	4313      	orrs	r3, r2
 8004496:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4921      	ldr	r1, [pc, #132]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	491a      	ldr	r1, [pc, #104]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80044e0:	4b15      	ldr	r3, [pc, #84]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	4912      	ldr	r1, [pc, #72]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	490b      	ldr	r1, [pc, #44]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800452a:	4313      	orrs	r3, r2
 800452c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3748      	adds	r7, #72	; 0x48
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000

0800453c <HAL_SPI_Init>:
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_SPI_Init+0x12>
 800454a:	2301      	movs	r3, #1
 800454c:	e09d      	b.n	800468a <HAL_SPI_Init+0x14e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_SPI_Init+0x2c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800455e:	d009      	beq.n	8004574 <HAL_SPI_Init+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	61da      	str	r2, [r3, #28]
 8004566:	e005      	b.n	8004574 <HAL_SPI_Init+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	615a      	str	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_SPI_Init+0x58>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc f960 	bl	8000854 <HAL_SPI_MspInit>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b4:	d902      	bls.n	80045bc <HAL_SPI_Init+0x80>
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e002      	b.n	80045c2 <HAL_SPI_Init+0x86>
 80045bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_Init+0xa0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Init+0xa0>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	ea42 0103 	orr.w	r1, r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	0c1b      	lsrs	r3, r3, #16
 8004638:	f003 0204 	and.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004658:	ea42 0103 	orr.w	r1, r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004678:	61da      	str	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004688:	2300      	movs	r3, #0
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SPI_DeInit>:
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_SPI_DeInit+0x12>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e01a      	b.n	80046da <HAL_SPI_DeInit+0x48>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc f90b 	bl	80008d8 <HAL_SPI_MspDeInit>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80046d8:	2300      	movs	r3, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_SPI_TransmitReceive>:
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08a      	sub	sp, #40	; 0x28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	807b      	strh	r3, [r7, #2]
 80046f0:	2301      	movs	r3, #1
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x26>
 8004704:	2302      	movs	r3, #2
 8004706:	e1fb      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x41e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004710:	f7fc fb36 	bl	8000d80 <HAL_GetTick>
 8004714:	61f8      	str	r0, [r7, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800471c:	76fb      	strb	r3, [r7, #27]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	887b      	ldrh	r3, [r7, #2]
 8004726:	827b      	strh	r3, [r7, #18]
 8004728:	887b      	ldrh	r3, [r7, #2]
 800472a:	823b      	strh	r3, [r7, #16]
 800472c:	7efb      	ldrb	r3, [r7, #27]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d00e      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x6e>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004738:	d106      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x66>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x66>
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d003      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x6e>
 8004748:	2302      	movs	r3, #2
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e1cd      	b.n	8004aec <HAL_SPI_TransmitReceive+0x40a>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x80>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_TransmitReceive+0x80>
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_SPI_TransmitReceive+0x88>
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004768:	e1c0      	b.n	8004aec <HAL_SPI_TransmitReceive+0x40a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b04      	cmp	r3, #4
 8004774:	d003      	beq.n	800477e <HAL_SPI_TransmitReceive+0x9c>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2205      	movs	r2, #5
 800477a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	887a      	ldrh	r2, [r7, #2]
 800478e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	887a      	ldrh	r2, [r7, #2]
 8004796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	887a      	ldrh	r2, [r7, #2]
 80047aa:	879a      	strh	r2, [r3, #60]	; 0x3c
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	651a      	str	r2, [r3, #80]	; 0x50
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047c0:	d802      	bhi.n	80047c8 <HAL_SPI_TransmitReceive+0xe6>
 80047c2:	8a3b      	ldrh	r3, [r7, #16]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d908      	bls.n	80047da <HAL_SPI_TransmitReceive+0xf8>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	e007      	b.n	80047ea <HAL_SPI_TransmitReceive+0x108>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d007      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x126>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004810:	d97c      	bls.n	800490c <HAL_SPI_TransmitReceive+0x22a>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_TransmitReceive+0x13e>
 800481a:	8a7b      	ldrh	r3, [r7, #18]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d169      	bne.n	80048f4 <HAL_SPI_TransmitReceive+0x212>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004844:	e056      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x212>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b02      	cmp	r3, #2
 8004852:	d11b      	bne.n	800488c <HAL_SPI_TransmitReceive+0x1aa>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d016      	beq.n	800488c <HAL_SPI_TransmitReceive+0x1aa>
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	2b01      	cmp	r3, #1
 8004862:	d113      	bne.n	800488c <HAL_SPI_TransmitReceive+0x1aa>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004888:	2300      	movs	r3, #0
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d11c      	bne.n	80048d4 <HAL_SPI_TransmitReceive+0x1f2>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x1f2>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	b292      	uxth	r2, r2
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	1c9a      	adds	r2, r3, #2
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048d0:	2301      	movs	r3, #1
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
 80048d4:	f7fc fa54 	bl	8000d80 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d807      	bhi.n	80048f4 <HAL_SPI_TransmitReceive+0x212>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d003      	beq.n	80048f4 <HAL_SPI_TransmitReceive+0x212>
 80048ec:	2303      	movs	r3, #3
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f2:	e0fb      	b.n	8004aec <HAL_SPI_TransmitReceive+0x40a>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1a3      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x164>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d19d      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x164>
 800490a:	e0df      	b.n	8004acc <HAL_SPI_TransmitReceive+0x3ea>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_SPI_TransmitReceive+0x23a>
 8004914:	8a7b      	ldrh	r3, [r7, #18]
 8004916:	2b01      	cmp	r3, #1
 8004918:	f040 80cb 	bne.w	8004ab2 <HAL_SPI_TransmitReceive+0x3d0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d912      	bls.n	800494c <HAL_SPI_TransmitReceive+0x26a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b02      	subs	r3, #2
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800494a:	e0b2      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x3d0>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004972:	e09e      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x3d0>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d134      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x30a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02f      	beq.n	80049ec <HAL_SPI_TransmitReceive+0x30a>
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	2b01      	cmp	r3, #1
 8004990:	d12c      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x30a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	d912      	bls.n	80049c2 <HAL_SPI_TransmitReceive+0x2e0>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60da      	str	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b02      	subs	r3, #2
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049c0:	e012      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x306>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049e8:	2300      	movs	r3, #0
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d148      	bne.n	8004a8c <HAL_SPI_TransmitReceive+0x3aa>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d042      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x3aa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d923      	bls.n	8004a5a <HAL_SPI_TransmitReceive+0x378>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	b292      	uxth	r2, r2
 8004a1e:	801a      	strh	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b02      	subs	r3, #2
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d81f      	bhi.n	8004a88 <HAL_SPI_TransmitReceive+0x3a6>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	e016      	b.n	8004a88 <HAL_SPI_TransmitReceive+0x3a6>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f103 020c 	add.w	r2, r3, #12
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	7812      	ldrb	r2, [r2, #0]
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	641a      	str	r2, [r3, #64]	; 0x40
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a88:	2301      	movs	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8c:	f7fc f978 	bl	8000d80 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d803      	bhi.n	8004aa4 <HAL_SPI_TransmitReceive+0x3c2>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d102      	bne.n	8004aaa <HAL_SPI_TransmitReceive+0x3c8>
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x3d0>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab0:	e01c      	b.n	8004aec <HAL_SPI_TransmitReceive+0x40a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f47f af5b 	bne.w	8004974 <HAL_SPI_TransmitReceive+0x292>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f47f af54 	bne.w	8004974 <HAL_SPI_TransmitReceive+0x292>
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f937 	bl	8004d44 <SPI_EndRxTxTransaction>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x408>
 8004adc:	2301      	movs	r3, #1
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60
 8004ae8:	e000      	b.n	8004aec <HAL_SPI_TransmitReceive+0x40a>
 8004aea:	bf00      	nop
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b00:	4618      	mov	r0, r3
 8004b02:	3728      	adds	r7, #40	; 0x28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <SPI_WaitFlagStateUntilTimeout>:
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	603b      	str	r3, [r7, #0]
 8004b14:	4613      	mov	r3, r2
 8004b16:	71fb      	strb	r3, [r7, #7]
 8004b18:	f7fc f932 	bl	8000d80 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	4413      	add	r3, r2
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	f7fc f92a 	bl	8000d80 <HAL_GetTick>
 8004b2c:	61b8      	str	r0, [r7, #24]
 8004b2e:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	015b      	lsls	r3, r3, #5
 8004b34:	0d1b      	lsrs	r3, r3, #20
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	e054      	b.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d050      	beq.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004b48:	f7fc f91a 	bl	8000d80 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d902      	bls.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d13d      	bne.n	8004bda <SPI_WaitFlagStateUntilTimeout+0xd2>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b76:	d111      	bne.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b80:	d004      	beq.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0x84>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b8a:	d107      	bne.n	8004b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba4:	d10f      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bb4:	601a      	str	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e017      	b.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0x102>
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	bf0c      	ite	eq
 8004bfa:	2301      	moveq	r3, #1
 8004bfc:	2300      	movne	r3, #0
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	461a      	mov	r2, r3
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d19b      	bne.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0x38>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000

08004c18 <SPI_WaitFifoStateUntilTimeout>:
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	75fb      	strb	r3, [r7, #23]
 8004c2a:	f7fc f8a9 	bl	8000d80 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	4413      	add	r3, r2
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3a:	f7fc f8a1 	bl	8000d80 <HAL_GetTick>
 8004c3e:	6238      	str	r0, [r7, #32]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	00da      	lsls	r2, r3, #3
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	0d1b      	lsrs	r3, r3, #20
 8004c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e060      	b.n	8004d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c68:	d107      	bne.n	8004c7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	75fb      	strb	r3, [r7, #23]
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d050      	beq.n	8004d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8004c82:	f7fc f87d 	bl	8000d80 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d902      	bls.n	8004c98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d13d      	bne.n	8004d14 <SPI_WaitFifoStateUntilTimeout+0xfc>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb0:	d111      	bne.n	8004cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cba:	d004      	beq.n	8004cc6 <SPI_WaitFifoStateUntilTimeout+0xae>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc4:	d107      	bne.n	8004cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cde:	d10f      	bne.n	8004d00 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004d10:	2303      	movs	r3, #3
 8004d12:	e010      	b.n	8004d36 <SPI_WaitFifoStateUntilTimeout+0x11e>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <SPI_WaitFifoStateUntilTimeout+0x106>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	61bb      	str	r3, [r7, #24]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689a      	ldr	r2, [r3, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d196      	bne.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8004d34:	2300      	movs	r3, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000000 	.word	0x20000000

08004d44 <SPI_EndRxTxTransaction>:
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff ff5b 	bl	8004c18 <SPI_WaitFifoStateUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <SPI_EndRxTxTransaction+0x34>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
 8004d74:	2303      	movs	r3, #3
 8004d76:	e027      	b.n	8004dc8 <SPI_EndRxTxTransaction+0x84>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff fec0 	bl	8004b08 <SPI_WaitFlagStateUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <SPI_EndRxTxTransaction+0x5a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e014      	b.n	8004dc8 <SPI_EndRxTxTransaction+0x84>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff ff34 	bl	8004c18 <SPI_WaitFifoStateUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <SPI_EndRxTxTransaction+0x82>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	661a      	str	r2, [r3, #96]	; 0x60
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e000      	b.n	8004dc8 <SPI_EndRxTxTransaction+0x84>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e049      	b.n	8004e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fb fe9a 	bl	8000b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fae0 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d001      	beq.n	8004e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e04a      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	; (8004f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	; (8004f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x6c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d115      	bne.n	8004f18 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	4b17      	ldr	r3, [pc, #92]	; (8004f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d015      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0xaa>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f04:	d011      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e008      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	00010007 	.word	0x00010007

08004f54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a1a      	ldr	r2, [r3, #32]
 8004f72:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10f      	bne.n	8004f9c <HAL_TIM_Base_Stop_IT+0x48>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f240 4344 	movw	r3, #1092	; 0x444
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d107      	bne.n	8004f9c <HAL_TIM_Base_Stop_IT+0x48>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0201 	bic.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d122      	bne.n	800500e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d11b      	bne.n	800500e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f06f 0202 	mvn.w	r2, #2
 8004fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 0303 	and.w	r3, r3, #3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f9ce 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8004ffa:	e005      	b.n	8005008 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f9c0 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 f9d1 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d122      	bne.n	8005062 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b04      	cmp	r3, #4
 8005028:	d11b      	bne.n	8005062 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f06f 0204 	mvn.w	r2, #4
 8005032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f9a4 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 800504e:	e005      	b.n	800505c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f996 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9a7 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d122      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d11b      	bne.n	80050b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0208 	mvn.w	r2, #8
 8005086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2204      	movs	r2, #4
 800508c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f97a 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e005      	b.n	80050b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f96c 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f97d 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d122      	bne.n	800510a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d11b      	bne.n	800510a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f06f 0210 	mvn.w	r2, #16
 80050da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2208      	movs	r2, #8
 80050e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f950 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 80050f6:	e005      	b.n	8005104 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f942 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f953 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10e      	bne.n	8005136 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b01      	cmp	r3, #1
 8005124:	d107      	bne.n	8005136 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0201 	mvn.w	r2, #1
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fb fa31 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005140:	2b80      	cmp	r3, #128	; 0x80
 8005142:	d10e      	bne.n	8005162 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514e:	2b80      	cmp	r3, #128	; 0x80
 8005150:	d107      	bne.n	8005162 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800515a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 faed 	bl	800573c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fae0 	bl	8005750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f901 	bl	80053be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d10e      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d107      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0220 	mvn.w	r2, #32
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 faa0 	bl	8005728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d101      	bne.n	800520c <HAL_TIM_ConfigClockSource+0x1c>
 8005208:	2302      	movs	r3, #2
 800520a:	e0b6      	b.n	800537a <HAL_TIM_ConfigClockSource+0x18a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd8>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 8086 	beq.w	8005366 <HAL_TIM_ConfigClockSource+0x176>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xaa>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x11e>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xfe>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x13e>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x15e>
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 f99d 	bl	80055e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04f      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f000 f986 	bl	80055e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 f8fa 	bl	80054f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	; 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f953 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 800530c:	e02c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 f919 	bl	8005552 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	; 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f943 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 800532c:	e01c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 f8da 	bl	80054f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f933 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 800534c:	e00c      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 f92a 	bl	80055b2 <TIM_ITRx_SetConfig>
      break;
 800535e:	e003      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e000      	b.n	8005368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005378:	7bfb      	ldrb	r3, [r7, #15]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a3c      	ldr	r2, [pc, #240]	; (80054d8 <TIM_Base_SetConfig+0x104>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a39      	ldr	r2, [pc, #228]	; (80054dc <TIM_Base_SetConfig+0x108>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a38      	ldr	r2, [pc, #224]	; (80054e0 <TIM_Base_SetConfig+0x10c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x38>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a37      	ldr	r2, [pc, #220]	; (80054e4 <TIM_Base_SetConfig+0x110>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a2d      	ldr	r2, [pc, #180]	; (80054d8 <TIM_Base_SetConfig+0x104>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d01b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542c:	d017      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <TIM_Base_SetConfig+0x108>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a29      	ldr	r2, [pc, #164]	; (80054e0 <TIM_Base_SetConfig+0x10c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00f      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a28      	ldr	r2, [pc, #160]	; (80054e4 <TIM_Base_SetConfig+0x110>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00b      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a27      	ldr	r2, [pc, #156]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d007      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <TIM_Base_SetConfig+0x118>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d003      	beq.n	800545e <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d108      	bne.n	8005470 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <TIM_Base_SetConfig+0x104>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a11      	ldr	r2, [pc, #68]	; (80054e4 <TIM_Base_SetConfig+0x110>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a0f      	ldr	r2, [pc, #60]	; (80054ec <TIM_Base_SetConfig+0x118>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_Base_SetConfig+0xe8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d103      	bne.n	80054c4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	615a      	str	r2, [r3, #20]
}
 80054ca:	bf00      	nop
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00
 80054dc:	40000400 	.word	0x40000400
 80054e0:	40000800 	.word	0x40000800
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f023 030a 	bic.w	r3, r3, #10
 8005530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005552:	b480      	push	{r7}
 8005554:	b087      	sub	sp, #28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0210 	bic.w	r2, r3, #16
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800557c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b085      	sub	sp, #20
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f043 0307 	orr.w	r3, r3, #7
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	609a      	str	r2, [r3, #8]
}
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
 80055f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	021a      	lsls	r2, r3, #8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	431a      	orrs	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800563c:	2302      	movs	r3, #2
 800563e:	e063      	b.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a2b      	ldr	r2, [pc, #172]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800567a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d013      	beq.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a17      	ldr	r2, [pc, #92]	; (8005720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a12      	ldr	r2, [pc, #72]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a13      	ldr	r2, [pc, #76]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d10c      	bne.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3714      	adds	r7, #20
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40013400 	.word	0x40013400
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40014000 	.word	0x40014000

08005728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800576c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005770:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	b29b      	uxth	r3, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	b29b      	uxth	r3, r3
 8005782:	4013      	ands	r3, r2
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800579a:	b084      	sub	sp, #16
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	f107 0014 	add.w	r0, r7, #20
 80057a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	b004      	add	sp, #16
 80057da:	4770      	bx	lr

080057dc <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	70fb      	strb	r3, [r7, #3]
 80057e8:	4613      	mov	r3, r2
 80057ea:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80057ec:	883b      	ldrh	r3, [r7, #0]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d903      	bls.n	80057fa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057f8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80057fa:	2200      	movs	r2, #0
 80057fc:	2108      	movs	r1, #8
 80057fe:	480f      	ldr	r0, [pc, #60]	; (800583c <GYRO_IO_Write+0x60>)
 8005800:	f7fb fea0 	bl	8001544 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPI1_WriteRead(WriteAddr);
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fb f88e 	bl	8000928 <SPI1_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800580c:	e00a      	b.n	8005824 <GYRO_IO_Write+0x48>
  {
    SPI1_WriteRead(*pBuffer);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7fb f888 	bl	8000928 <SPI1_WriteRead>
    NumByteToWrite--;
 8005818:	883b      	ldrh	r3, [r7, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3301      	adds	r3, #1
 8005822:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8005824:	883b      	ldrh	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f1      	bne.n	800580e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800582a:	2201      	movs	r2, #1
 800582c:	2108      	movs	r1, #8
 800582e:	4803      	ldr	r0, [pc, #12]	; (800583c <GYRO_IO_Write+0x60>)
 8005830:	f7fb fe88 	bl	8001544 <HAL_GPIO_WritePin>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	48001000 	.word	0x48001000

08005840 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
 800584c:	4613      	mov	r3, r2
 800584e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8005850:	883b      	ldrh	r3, [r7, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d904      	bls.n	8005860 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800585c:	70fb      	strb	r3, [r7, #3]
 800585e:	e003      	b.n	8005868 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005866:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8005868:	2200      	movs	r2, #0
 800586a:	2108      	movs	r1, #8
 800586c:	4810      	ldr	r0, [pc, #64]	; (80058b0 <GYRO_IO_Read+0x70>)
 800586e:	f7fb fe69 	bl	8001544 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPI1_WriteRead(ReadAddr);
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	4618      	mov	r0, r3
 8005876:	f7fb f857 	bl	8000928 <SPI1_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800587a:	e00c      	b.n	8005896 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPI1_WriteRead(DUMMY_BYTE);
 800587c:	2000      	movs	r0, #0
 800587e:	f7fb f853 	bl	8000928 <SPI1_WriteRead>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800588a:	883b      	ldrh	r3, [r7, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3301      	adds	r3, #1
 8005894:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8005896:	883b      	ldrh	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1ef      	bne.n	800587c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800589c:	2201      	movs	r2, #1
 800589e:	2108      	movs	r1, #8
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <GYRO_IO_Read+0x70>)
 80058a2:	f7fb fe4f 	bl	8001544 <HAL_GPIO_WritePin>
}  
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	48001000 	.word	0x48001000

080058b4 <GYRO_Init>:
/**
  * @brief  Set GYROSCOPE Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t GYRO_Init(void)
{  
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	71fb      	strb	r3, [r7, #7]
  uint16_t ctrl = 0x0000;
 80058be:	2300      	movs	r3, #0
 80058c0:	80bb      	strh	r3, [r7, #4]
//  L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
//  L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
//  L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
//  
  /* Configure MEMS: data rate, power mode, full scale and axes */
  ctrl = (uint16_t) (L3GD20_MODE_ACTIVE | L3GD20_OUTPUT_DATARATE_1 | \
 80058c2:	233f      	movs	r3, #63	; 0x3f
 80058c4:	80bb      	strh	r3, [r7, #4]
    L3GD20_AXES_ENABLE | L3GD20_BANDWIDTH_4);
  
  ctrl |= (uint16_t) ((L3GD20_BlockDataUpdate_Continous | L3GD20_BLE_LSB | \
 80058c6:	88bb      	ldrh	r3, [r7, #4]
 80058c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058cc:	80bb      	strh	r3, [r7, #4]
		  L3GD20_FULLSCALE_500) << 8);
  
  /* L3gd20 Init */	 
  L3GD20_Init(ctrl);
 80058ce:	88bb      	ldrh	r3, [r7, #4]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 f811 	bl	80058f8 <L3GD20_Init>
  
  ctrl = (uint8_t) ((L3GD20_HPM_NORMAL_MODE_RES | L3GD20_HPFCF_0));		
 80058d6:	2300      	movs	r3, #0
 80058d8:	80bb      	strh	r3, [r7, #4]
  
  L3GD20_FilterConfig(ctrl) ;
 80058da:	88bb      	ldrh	r3, [r7, #4]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 f839 	bl	8005956 <L3GD20_FilterConfig>
  
  L3GD20_FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80058e4:	2010      	movs	r0, #16
 80058e6:	f000 f857 	bl	8005998 <L3GD20_FilterCmd>
  
//  L3GD20_DisableIT(L3GD20_INT2);
//  L3GD20_EnableIT(L3GD20_INT2);
  
  ret = GYRO_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80058ee:	79fb      	ldrb	r3, [r7, #7]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  //GYRO_IO_Init();
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005906:	88fb      	ldrh	r3, [r7, #6]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800590c:	f107 030f 	add.w	r3, r7, #15
 8005910:	2201      	movs	r2, #1
 8005912:	2120      	movs	r1, #32
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff61 	bl	80057dc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	b29b      	uxth	r3, r3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8005924:	f107 030f 	add.w	r3, r7, #15
 8005928:	2201      	movs	r2, #1
 800592a:	2123      	movs	r1, #35	; 0x23
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff55 	bl	80057dc <GYRO_IO_Write>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
  
  /* Configure the low level interface */
  //GYRO_IO_Init();
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8005940:	1dfb      	adds	r3, r7, #7
 8005942:	2201      	movs	r2, #1
 8005944:	210f      	movs	r1, #15
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff7a 	bl	8005840 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800594c:	79fb      	ldrb	r3, [r7, #7]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	4603      	mov	r3, r0
 800595e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005960:	f107 030f 	add.w	r3, r7, #15
 8005964:	2201      	movs	r2, #1
 8005966:	2121      	movs	r1, #33	; 0x21
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff ff69 	bl	8005840 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8005978:	7bfa      	ldrb	r2, [r7, #15]
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4313      	orrs	r3, r2
 800597e:	b2db      	uxtb	r3, r3
 8005980:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005982:	f107 030f 	add.w	r3, r7, #15
 8005986:	2201      	movs	r2, #1
 8005988:	2121      	movs	r1, #33	; 0x21
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ff26 	bl	80057dc <GYRO_IO_Write>
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80059a2:	f107 030f 	add.w	r3, r7, #15
 80059a6:	2201      	movs	r2, #1
 80059a8:	2124      	movs	r1, #36	; 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ff48 	bl	8005840 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	f023 0310 	bic.w	r3, r3, #16
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80059ba:	7bfa      	ldrb	r2, [r7, #15]
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	4313      	orrs	r3, r2
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80059c4:	f107 030f 	add.w	r3, r7, #15
 80059c8:	2201      	movs	r2, #1
 80059ca:	2124      	movs	r1, #36	; 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff05 	bl	80057dc <GYRO_IO_Write>
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <L3GD20_ReadXYZAngRate_Raw>:
* @brief  Just get the raw angular data as uint8_t.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate_Raw(uint8_t *tmpbuffer)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80059e2:	2206      	movs	r2, #6
 80059e4:	2128      	movs	r1, #40	; 0x28
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff ff2a 	bl	8005840 <GYRO_IO_Read>
  
}
 80059ec:	bf00      	nop
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	; (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	; (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x44>)
 8005a08:	f000 f820 	bl	8005a4c <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	08005a94 	.word	0x08005a94
 8005a30:	08005a94 	.word	0x08005a94
 8005a34:	08005a94 	.word	0x08005a94
 8005a38:	08005a98 	.word	0x08005a98

08005a3c <memset>:
 8005a3c:	4402      	add	r2, r0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d100      	bne.n	8005a46 <memset+0xa>
 8005a44:	4770      	bx	lr
 8005a46:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4a:	e7f9      	b.n	8005a40 <memset+0x4>

08005a4c <_init>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr

08005a58 <_fini>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr
